schema {
  query: Query
  mutation: Mutation
}
"An ISO 8601-encoded date"
scalar ISO8601Date
"An ISO 8601-encoded datetime"
scalar ISO8601DateTime
"Represents untyped JSON"
scalar JSON
scalar Upload
"Autogenerated return type of AddLikeToRecording."
type AddLikeToRecordingPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  like: Like
  success: Boolean!
}
"Autogenerated return type of AddPlaylistRecording."
type AddPlaylistRecordingPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  playlistItem: PlaylistItem
}
type Aggregate {
  docCount: Int!
  key: String!
}
type Album {
  albumArt: Attachment
  createdAt: ISO8601DateTime
  description: String
  digitalRemaster(id: ID!): DigitalRemaster!
  digitalRemasters(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DigitalRemasterConnection!
  externalId: String
  id: ID
  releaseDate: ISO8601Date
  title: String
  updatedAt: ISO8601DateTime
}
type Attachment {
  blob: Blob!
  byteSize: Int!
  contentType: String!
  createdAt: ISO8601DateTime!
  filename: String!
  updatedAt: ISO8601DateTime!
  url: String!
}
type AttributeError {
  attribute: String!
  errors: [String!]!
}
type AudioFile {
  digitalRemaster: DigitalRemaster
  errorMessage: String
  file: Attachment
  filename: String!
  format: String!
  id: ID!
  status: AudioFileStatusEnum!
}
type AudioVariant {
  audioFile: Attachment
  bitRate: Int
  createdAt: ISO8601DateTime!
  digitalRemaster: DigitalRemaster
  format: String!
  id: ID!
  updatedAt: ISO8601DateTime!
}
"The connection type for AudioVariant."
type AudioVariantConnection {
  "A list of edges."
  edges: [AudioVariantEdge!]!
  "A list of nodes."
  nodes: [AudioVariant!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type AudioVariantEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AudioVariant
}
type AuthenticatedUser {
  email: String
  id: ID
  session: Session!
  username: String
}
type Blob {
  byteSize: Int!
  contentType: String!
  createdAt: ISO8601DateTime!
  filename: String!
  metadata: JSON
  updatedAt: ISO8601DateTime!
  url(width: Int): String!
}
"Autogenerated return type of ChangePlaylistItemPosition."
type ChangePlaylistItemPositionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  playlistItem: PlaylistItem
}
type Composer {
  bio: String
  birthDate: ISO8601Date
  composition(id: ID!): Composition!
  compositionRole(id: ID!): CompositionRole!
  compositionRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionRoleConnection!
  compositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionConnection!
  createdAt: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  orchestra(id: ID!): Orchestra!
  orchestraRole(id: ID!): OrchestraRole!
  orchestraRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraRoleConnection!
  orchestras(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraConnection!
  photo: Attachment
  recording(id: ID!): Recording!
  recordingSinger(id: ID!): RecordingSinger!
  recordingSingers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingSingerConnection!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  slug: String
  sortName: String
  updatedAt: ISO8601Date
}
"The connection type for Composer."
type ComposerConnection {
  "A list of edges."
  edges: [ComposerEdge!]!
  "A list of nodes."
  nodes: [Composer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ComposerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Composer
}
type Composition {
  compositionLyric(id: ID!): CompositionLyric!
  compositionLyrics(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionLyricConnection!
  compositionRole(id: ID!): CompositionRole!
  compositionRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionRoleConnection!
  id: ID
  lyric(id: ID!): Lyric!
  lyrics(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LyricConnection!
  person: Person
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  tangotubeSlug: String
  title: String
}
"The connection type for Composition."
type CompositionConnection {
  "A list of edges."
  edges: [CompositionEdge!]!
  "A list of nodes."
  nodes: [Composition!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CompositionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Composition
}
type CompositionLyric {
  composition: Composition!
  createdAt: ISO8601DateTime!
  id: ID!
  lyric: Lyric!
  updatedAt: ISO8601DateTime!
}
"The connection type for CompositionLyric."
type CompositionLyricConnection {
  "A list of edges."
  edges: [CompositionLyricEdge!]!
  "A list of nodes."
  nodes: [CompositionLyric!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CompositionLyricEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CompositionLyric
}
type CompositionRole {
  composition: Composition
  id: ID
  person: Person
  role: CompositionTypeEnum
}
"The connection type for CompositionRole."
type CompositionRoleConnection {
  "A list of edges."
  edges: [CompositionRoleEdge!]!
  "A list of nodes."
  nodes: [CompositionRole!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CompositionRoleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CompositionRole
}
"Autogenerated return type of CreatePlayback."
type CreatePlaybackPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  playback: Playback
}
"Autogenerated return type of CreatePlaylist."
type CreatePlaylistPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  playlist: Playlist
}
"Autogenerated return type of DeletePlaylist."
type DeletePlaylistPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}
type DigitalRemaster {
  album: Album
  audioFile: AudioFile!
  audioVariant(id: ID!): AudioVariant!
  audioVariants(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): AudioVariantConnection!
  bpm: Int
  createdAt: ISO8601Date
  duration: Int
  externalId: String
  id: ID
  peakValue: Float
  recording: Recording!
  remasterAgent: RemasterAgent
  replayGain: Float
  tangoCloudId: String!
  updatedAt: ISO8601Date
  waveform: Waveform
}
"The connection type for DigitalRemaster."
type DigitalRemasterConnection {
  "A list of edges."
  edges: [DigitalRemasterEdge!]!
  "A list of nodes."
  nodes: [DigitalRemaster!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type DigitalRemasterEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DigitalRemaster
}
type ElRecodoSong {
  album: String
  artist: String
  author: String
  composer: String
  date: ISO8601Date
  ertNumber: Int
  id: ID
  label: String
  lyrics: String
  recording: Recording
  singer: String
  style: String
  title: String
}
"The connection type for ElRecodoSong."
type ElRecodoSongConnection {
  "A list of edges."
  edges: [ElRecodoSongEdge!]!
  "A list of nodes."
  nodes: [ElRecodoSong!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ElRecodoSongEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ElRecodoSong
}
type Errors {
  attributeErrors: [AttributeError!]!
  fullMessages: [String!]!
}
type FailedLogin {
  error: String!
}
type FailedRefresh {
  error: String!
}
type Genre {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  updatedAt: ISO8601DateTime!
}
"The connection type for Genre."
type GenreConnection {
  "A list of edges."
  edges: [GenreEdge!]!
  "A list of nodes."
  nodes: [Genre!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type GenreEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Genre
}
type Language {
  code: String!
  createdAt: ISO8601DateTime!
  id: ID!
  lyric(id: ID!): Lyric!
  lyrics(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LyricConnection!
  name: String!
  updatedAt: ISO8601DateTime!
}
type Like {
  createdAt: ISO8601DateTime!
  id: ID!
  likeableId: ID!
  likeableType: String!
  updatedAt: ISO8601DateTime!
  user: User!
}
"The connection type for Like."
type LikeConnection {
  "A list of edges."
  edges: [LikeEdge!]!
  "A list of nodes."
  nodes: [Like!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type LikeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Like
}
type Lyric {
  composition: Composition!
  createdAt: ISO8601Date
  id: ID
  language: Language!
  text: String!
  updatedAt: ISO8601Date
}
"The connection type for Lyric."
type LyricConnection {
  "A list of edges."
  edges: [LyricEdge!]!
  "A list of nodes."
  nodes: [Lyric!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type LyricEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Lyric
}
type Lyricist {
  bio: String
  birthDate: ISO8601Date
  composition(id: ID!): Composition!
  compositionRole(id: ID!): CompositionRole!
  compositionRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionRoleConnection!
  compositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionConnection!
  createdAt: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  orchestra(id: ID!): Orchestra!
  orchestraRole(id: ID!): OrchestraRole!
  orchestraRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraRoleConnection!
  orchestras(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraConnection!
  photo: Attachment
  recording(id: ID!): Recording!
  recordingSinger(id: ID!): RecordingSinger!
  recordingSingers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingSingerConnection!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  slug: String
  sortName: String
  updatedAt: ISO8601Date
}
"The connection type for Lyricist."
type LyricistConnection {
  "A list of edges."
  edges: [LyricistEdge!]!
  "A list of nodes."
  nodes: [Lyricist!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type LyricistEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Lyricist
}
type Mutation {
  addLikeToRecording(
    "Parameters for AddLikeToRecording"
    input: AddLikeToRecordingInput!
  ): AddLikeToRecordingPayload
  addPlaylistRecording(
    "Parameters for AddPlaylistRecording"
    input: AddPlaylistRecordingInput!
  ): AddPlaylistRecordingPayload
  appleLogin(
    "Parameters for AppleLogin"
    input: AppleLoginInput!
  ): LoginResult!
  changePlaylistItemPosition(
    "Parameters for ChangePlaylistItemPosition"
    input: ChangePlaylistItemPositionInput!
  ): ChangePlaylistItemPositionPayload
  createPlayback(
    "Parameters for CreatePlayback"
    input: CreatePlaybackInput!
  ): CreatePlaybackPayload
  createPlaylist(
    "Parameters for CreatePlaylist"
    input: CreatePlaylistInput!
  ): CreatePlaylistPayload
  deletePlaylist(
    "Parameters for DeletePlaylist"
    input: DeletePlaylistInput!
  ): DeletePlaylistPayload
  googleLogin(
    "Parameters for GoogleLogin"
    input: GoogleLoginInput!
  ): LoginResult!
  login(
    "Parameters for Login"
    input: LoginInput!
  ): LoginResult!
  refresh(
    "Parameters for Refresh"
    input: RefreshInput!
  ): RefreshResult!
  register(
    "Parameters for Register"
    input: RegisterInput!
  ): RegistrationResult!
  removeLikeFromRecording(
    "Parameters for RemoveLikeFromRecording"
    input: RemoveLikeFromRecordingInput!
  ): RemoveLikeFromRecordingPayload
  removePlayback(
    "Parameters for RemovePlayback"
    input: RemovePlaybackInput!
  ): RemovePlaybackPayload
  removePlaylistItem(
    "Parameters for RemovePlaylistItem"
    input: RemovePlaylistItemInput!
  ): RemovePlaylistItemPayload
  updatePlaylist(
    "Parameters for UpdatePlaylist"
    input: UpdatePlaylistInput!
  ): UpdatePlaylistPayload
  updateUser(
    "Parameters for Update"
    input: UpdateInput!
  ): UserResult!
}
type Orchestra {
  composition(id: ID!): Composition!
  compositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionConnection!
  genre(id: ID!): Genre!
  genres(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): GenreConnection!
  id: ID
  name: String
  orchestraPeriod(id: ID!): OrchestraPeriod!
  orchestraPeriods(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraPeriodConnection!
  orchestraRole(id: ID!): OrchestraRole!
  orchestraRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraRoleConnection!
  photo: Attachment
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  singer(id: ID!): Singer!
  singers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): SingerConnection!
  slug: String
  sortName: String
}
"The connection type for Orchestra."
type OrchestraConnection {
  "A list of edges."
  edges: [OrchestraEdge!]!
  "A list of nodes."
  nodes: [Orchestra!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type OrchestraEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Orchestra
}
type OrchestraPeriod {
  id: ID
}
"The connection type for OrchestraPeriod."
type OrchestraPeriodConnection {
  "A list of edges."
  edges: [OrchestraPeriodEdge!]!
  "A list of nodes."
  nodes: [OrchestraPeriod!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type OrchestraPeriodEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrchestraPeriod
}
type OrchestraPosition {
  createdAt: ISO8601Date
  id: ID
  updatedAt: ISO8601Date
}
"The connection type for OrchestraPosition."
type OrchestraPositionConnection {
  "A list of edges."
  edges: [OrchestraPositionEdge!]!
  "A list of nodes."
  nodes: [OrchestraPosition!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type OrchestraPositionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrchestraPosition
}
type OrchestraRole {
  id: ID
  orchestraPosition(id: ID!): OrchestraPosition!
  orchestraPositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraPositionConnection!
}
"The connection type for OrchestraRole."
type OrchestraRoleConnection {
  "A list of edges."
  edges: [OrchestraRoleEdge!]!
  "A list of nodes."
  nodes: [OrchestraRole!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type OrchestraRoleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OrchestraRole
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}
type Person {
  bio: String
  birthDate: ISO8601Date
  composition(id: ID!): Composition!
  compositionRole(id: ID!): CompositionRole!
  compositionRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionRoleConnection!
  compositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionConnection!
  createdAt: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  orchestra(id: ID!): Orchestra!
  orchestraRole(id: ID!): OrchestraRole!
  orchestraRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraRoleConnection!
  orchestras(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraConnection!
  photo: Attachment
  recording(id: ID!): Recording!
  recordingSinger(id: ID!): RecordingSinger!
  recordingSingers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingSingerConnection!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  slug: String
  sortName: String
  updatedAt: ISO8601Date
}
type Playback {
  createdAt: ISO8601DateTime!
  duration: Int!
  id: ID!
  recording: Recording!
  user: User!
}
"The connection type for Playback."
type PlaybackConnection {
  "A list of edges."
  edges: [PlaybackEdge!]!
  "A list of nodes."
  nodes: [Playback!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PlaybackEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Playback
}
type Playlist {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  image: Attachment
  like(id: ID!): Like!
  likes(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LikeConnection!
  playlistItem(id: ID!): PlaylistItem!
  playlistItems(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistItemConnection!
  public: Boolean!
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  share(id: ID!): Share!
  shares(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  slug: String
  subtitle: String
  system: Boolean!
  tanda(id: ID!): Tanda!
  tandas(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TandaConnection!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
}
"The connection type for Playlist."
type PlaylistConnection {
  "A list of edges."
  edges: [PlaylistEdge!]!
  "A list of nodes."
  nodes: [Playlist!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PlaylistEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Playlist
}
type PlaylistItem {
  createdAt: ISO8601DateTime!
  id: ID!
  item: Item!
  itemType: String!
  playlist: Playlist!
  position: Int!
  updatedAt: ISO8601DateTime!
}
"The connection type for PlaylistItem."
type PlaylistItemConnection {
  "A list of edges."
  edges: [PlaylistItemEdge!]!
  "A list of nodes."
  nodes: [PlaylistItem!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PlaylistItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PlaylistItem
}
type Query {
  audioVariant(
    "ID of the audio variant."
    id: ID!
  ): AudioVariant!
  composers(query: String, 
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ComposerConnection!
  currentUser: User!
  digitalRemaster(
    "ID of the audio transfer."
    id: ID!
  ): DigitalRemaster!
  elRecodoSongs(
    "Search query."
    query: String,
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ElRecodoSongConnection!
  genre(id: ID!): Genre!
  genres(query: String, 
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): GenreConnection!
  likedRecordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  lyricists(query: String, 
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LyricistConnection!
  orchestra(id: ID!): Orchestra!
  orchestras(query: String, 
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraConnection!
  playlist(id: ID!): Playlist!
  playlists(
    "Search query."
    query: String,
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistConnection!
  recording(
    "ID of the recording."
    id: ID!
  ): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  searchRecordings(filters: RecordingFilterInput, orderBy: RecordingOrderByInput, query: String): RecordingSearchResults!
  singers(query: String, 
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): SingerConnection!
  timePeriod(
    "ID of the period."
    id: ID!
  ): TimePeriod!
  timePeriods(
    "Search query."
    query: String,
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TimePeriodConnection!
  user(
    "ID of the user."
    id: ID!
  ): User!
  users(
    "Search query."
    query: String!,
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserConnection!
}
type RecordLabel {
  bio: String
  createdAt: ISO8601DateTime
  description: String
  foundedDate: ISO8601Date
  id: ID
  name: String
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  updatedAt: ISO8601DateTime
}
type Recording {
  audioVariant(id: ID!): AudioVariant!
  audioVariants(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): AudioVariantConnection!
  composition: Composition
  digitalRemaster(id: ID!): DigitalRemaster!
  digitalRemasters(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DigitalRemasterConnection!
  elRecodoSong: ElRecodoSong
  genre: Genre
  id: ID!
  like(id: ID!): Like!
  likes(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LikeConnection!
  lyric(id: ID!): Lyric!
  lyrics(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LyricConnection!
  orchestra: Orchestra
  playback(id: ID!): Playback!
  playbacks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaybackConnection!
  playbacksCount: Int!
  playlistItem(id: ID!): PlaylistItem!
  playlistItems(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistItemConnection!
  recordLabel: RecordLabel
  recordedDate: ISO8601Date
  recordingSinger(id: ID!): RecordingSinger!
  recordingSingers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingSingerConnection!
  recordingType: RecordingTypeEnum!
  share(id: ID!): Share!
  shares(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  singer(id: ID!): Singer!
  singers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): SingerConnection!
  slug: String!
  tag(id: ID!): Tag!
  tagging(id: ID!): Tagging!
  taggings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TaggingConnection!
  tags(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TagConnection!
  tanda(id: ID!): Tanda!
  tandaRecording(id: ID!): TandaRecording!
  tandaRecordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TandaRecordingConnection!
  tandas(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TandaConnection!
  timePeriod: TimePeriod
  title: String!
  waveform(id: ID!): Waveform!
  waveforms(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): WaveformConnection!
  year: Int
}
type RecordingAggregations {
  genre: [Aggregate!]!
  orchestraPeriods: [Aggregate!]!
  singers: [Aggregate!]!
  timePeriod: [Aggregate!]!
}
"The connection type for Recording."
type RecordingConnection {
  "A list of edges."
  edges: [RecordingEdge!]!
  "A list of nodes."
  nodes: [Recording!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type RecordingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Recording
}
type RecordingSearchResults {
  aggregations: RecordingAggregations!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
}
type RecordingSinger {
  createdAt: ISO8601DateTime!
  id: ID!
  person: Person!
  recording: Recording!
  soloist: Boolean!
  updatedAt: ISO8601DateTime!
}
"The connection type for RecordingSinger."
type RecordingSingerConnection {
  "A list of edges."
  edges: [RecordingSingerEdge!]!
  "A list of nodes."
  nodes: [RecordingSinger!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type RecordingSingerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RecordingSinger
}
type RemasterAgent {
  createdAt: ISO8601DateTime!
  description: String
  digitalRemaster(id: ID!): DigitalRemaster!
  digitalRemasters(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DigitalRemasterConnection!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
  url: String
}
"Autogenerated return type of RemoveLikeFromRecording."
type RemoveLikeFromRecordingPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}
"Autogenerated return type of RemovePlayback."
type RemovePlaybackPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]
  message: String!
  success: Boolean!
}
"Autogenerated return type of RemovePlaylistItem."
type RemovePlaylistItemPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}
type Session {
  access: String
  accessExpiresAt: ISO8601DateTime
  refresh: String
  refreshExpiresAt: ISO8601DateTime
}
type Share {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  user: User!
}
"The connection type for Share."
type ShareConnection {
  "A list of edges."
  edges: [ShareEdge!]!
  "A list of nodes."
  nodes: [Share!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ShareEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Share
}
type Singer {
  bio: String
  birthDate: ISO8601Date
  composition(id: ID!): Composition!
  compositionRole(id: ID!): CompositionRole!
  compositionRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionRoleConnection!
  compositions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CompositionConnection!
  createdAt: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  orchestra(id: ID!): Orchestra!
  orchestraRole(id: ID!): OrchestraRole!
  orchestraRoles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraRoleConnection!
  orchestras(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): OrchestraConnection!
  photo: Attachment
  recording(id: ID!): Recording!
  recordingSinger(id: ID!): RecordingSinger!
  recordingSingers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingSingerConnection!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  slug: String
  sortName: String
  updatedAt: ISO8601Date
}
"The connection type for Singer."
type SingerConnection {
  "A list of edges."
  edges: [SingerEdge!]!
  "A list of nodes."
  nodes: [Singer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type SingerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Singer
}
type Tag {
  id: ID!
  name: String!
  tagging(id: ID!): Tagging!
  taggings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TaggingConnection!
}
"The connection type for Tag."
type TagConnection {
  "A list of edges."
  edges: [TagEdge!]!
  "A list of nodes."
  nodes: [Tag!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type TagEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Tag
}
type Tagging {
  id: ID!
  tag: Tag!
  user: User!
}
"The connection type for Tagging."
type TaggingConnection {
  "A list of edges."
  edges: [TaggingEdge!]!
  "A list of nodes."
  nodes: [Tagging!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type TaggingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Tagging
}
type Tanda {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  like(id: ID!): Like!
  likes(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LikeConnection!
  playlist(id: ID!): Playlist!
  playlistItem(id: ID!): PlaylistItem!
  playlistItems(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistItemConnection!
  playlists(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistConnection!
  public: Boolean!
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  share(id: ID!): Share!
  shares(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  subtitle: String
  tandaRecording(id: ID!): TandaRecording!
  tandaRecordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TandaRecordingConnection!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
}
"The connection type for Tanda."
type TandaConnection {
  "A list of edges."
  edges: [TandaEdge!]!
  "A list of nodes."
  nodes: [Tanda!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type TandaEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Tanda
}
type TandaRecording {
  createdAt: ISO8601DateTime!
  id: ID!
  position: Int!
  recording: Recording!
  tanda: Tanda!
  updatedAt: ISO8601DateTime!
}
"The connection type for TandaRecording."
type TandaRecordingConnection {
  "A list of edges."
  edges: [TandaRecordingEdge!]!
  "A list of nodes."
  nodes: [TandaRecording!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type TandaRecordingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TandaRecording
}
type TimePeriod {
  description: String
  endYear: Int
  id: ID
  image: Attachment
  name: String
  recording(id: ID!): Recording!
  recordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): RecordingConnection!
  slug: String
  startYear: Int
}
"The connection type for TimePeriod."
type TimePeriodConnection {
  "A list of edges."
  edges: [TimePeriodEdge!]!
  "A list of nodes."
  nodes: [TimePeriod!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type TimePeriodEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimePeriod
}
"Autogenerated return type of UpdatePlaylist."
type UpdatePlaylistPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [String!]
  playlist: Playlist
}
type User {
  admin: Boolean!
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  like(id: ID!): Like!
  likes(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): LikeConnection!
  playback(id: ID!): Playback!
  playbacks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaybackConnection!
  playlist(id: ID!): Playlist!
  playlistItem(id: ID!): PlaylistItem!
  playlistItems(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistItemConnection!
  playlists(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlaylistConnection!
  provider: String
  share(id: ID!): Share!
  sharedOrchestra(id: ID!): Share!
  sharedOrchestras(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  sharedPlaylist(id: ID!): Share!
  sharedPlaylists(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  sharedRecording(id: ID!): Share!
  sharedRecordings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  sharedTanda(id: ID!): Share!
  sharedTandas(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  shares(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ShareConnection!
  tag(id: ID!): Tag!
  tagging(id: ID!): Tagging!
  taggings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TaggingConnection!
  tags(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TagConnection!
  tanda(id: ID!): Tanda!
  tandas(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TandaConnection!
  uid: String
  updatedAt: ISO8601DateTime!
  userPreference: UserPreference
  username: String
}
"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge!]!
  "A list of nodes."
  nodes: [User!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}
type UserPreference {
  avatar: Attachment
  createdAt: ISO8601DateTime!
  firstName: String
  lastName: String
  name: String
  updatedAt: ISO8601DateTime!
  user: User!
}
type ValidationError {
  errors: Errors!
}
type Waveform {
  bits: Int!
  channels: Int!
  createdAt: ISO8601DateTime!
  data: [Float!]!
  digitalRemaster: DigitalRemaster
  id: ID!
  image: Attachment
  length: Int!
  sampleRate: Int!
  samplesPerPixel: Int!
  updatedAt: ISO8601DateTime!
  version: Int!
}
"The connection type for Waveform."
type WaveformConnection {
  "A list of edges."
  edges: [WaveformEdge!]!
  "A list of nodes."
  nodes: [Waveform!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type WaveformEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Waveform
}
union Item = Recording
union LoginResult = AuthenticatedUser | FailedLogin
union RefreshResult = FailedRefresh | Session
union RegistrationResult = AuthenticatedUser | ValidationError
union UserResult = User | ValidationError
enum AudioFileStatusEnum {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
enum CompositionTypeEnum {
  composer
  lyricist
}
enum OrderEnum {
  "Ascending order"
  ASC
  "Descending order"
  DESC
}
enum RecordingOrderFieldEnum {
  "Sort by title"
  TITLE
  "Sort by orchestra"
  ORCHESTRA
  "Sort by singers"
  SINGERS
  "Sort by genre"
  GENRE
  "Sort by recorded date"
  RECORDED_DATE
  "Sort by playbacks count"
  PLAYBACKS_COUNT
  "Sort by recording type"
  RECORDING_TYPE
  "Sort by created date"
  CREATED_AT
  "Sort by updated date"
  UPDATED_AT
  "Sort by record label"
  RECORD_LABEL
  "Sort by time period"
  TIME_PERIOD
}
enum RecordingTypeEnum {
  studio
  live
}
"Autogenerated input type of AddLikeToRecording"
input AddLikeToRecordingInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  recordingId: ID!
}
"Autogenerated input type of AddPlaylistRecording"
input AddPlaylistRecordingInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  playlistId: ID!
  recordingId: ID!
}
"Autogenerated input type of AppleLogin"
input AppleLoginInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String
  firstName: String
  identityToken: String!
  lastName: String
  userIdentifier: String!
}
"Autogenerated input type of ChangePlaylistItemPosition"
input ChangePlaylistItemPositionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  playlistItemId: ID!
  position: Int!
}
"Autogenerated input type of CreatePlayback"
input CreatePlaybackInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  recordingId: ID!
}
"Autogenerated input type of CreatePlaylist"
input CreatePlaylistInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  image: Upload
  itemIds: [ID!]
  public: Boolean
  title: String!
}
"Autogenerated input type of DeletePlaylist"
input DeletePlaylistInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}
"Autogenerated input type of GoogleLogin"
input GoogleLoginInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  idToken: String!
}
"Autogenerated input type of Login"
input LoginInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  login: String!
  password: String!
}
input RecordingFilterInput {
  genres: [String!]
  orchestra: String
  orchestraPeriods: [String!]
  roles: [String!]
  singers: [String!]
}
input RecordingOrderByInput {
  "Field to sort by."
  field: RecordingOrderFieldEnum!
  "Sort order, can be 'asc' or 'desc'."
  order: OrderEnum!
}
"Autogenerated input type of Refresh"
input RefreshInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  refreshToken: String!
}
"Autogenerated input type of Register"
input RegisterInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String!
  password: String!
  username: String
}
"Autogenerated input type of RemoveLikeFromRecording"
input RemoveLikeFromRecordingInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  recordingId: ID!
}
"Autogenerated input type of RemovePlayback"
input RemovePlaybackInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}
"Autogenerated input type of RemovePlaylistItem"
input RemovePlaylistItemInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  playlistItemId: ID!
}
"Autogenerated input type of Update"
input UpdateInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  avatar: Upload
  username: String
  firstName: String
  lastName: String
  password: String
}
"Autogenerated input type of UpdatePlaylist"
input UpdatePlaylistInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  id: ID!
  image: Upload
  public: Boolean
  title: String
}
"Requires that exactly one field must be supplied and that field must not be `null`."
directive @oneOf on INPUT_OBJECT
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR

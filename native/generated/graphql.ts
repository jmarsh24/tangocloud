/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded date */
  ISO8601Date: { input: any; output: any; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
  /** Represents untyped JSON */
  JSON: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

/** Autogenerated input type of AddLikeToRecording */
export type AddLikeToRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddLikeToRecording. */
export type AddLikeToRecordingPayload = {
  __typename?: 'AddLikeToRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  like?: Maybe<Like>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of AddPlaylistRecording */
export type AddPlaylistRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistId: Scalars['ID']['input'];
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddPlaylistRecording. */
export type AddPlaylistRecordingPayload = {
  __typename?: 'AddPlaylistRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  docCount: Scalars['Int']['output'];
  key: Scalars['String']['output'];
};

export type Album = {
  __typename?: 'Album';
  albumArt?: Maybe<Attachment>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  digitalRemaster: DigitalRemaster;
  digitalRemasters: DigitalRemasterConnection;
  externalId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  releaseDate?: Maybe<Scalars['ISO8601Date']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
};


export type AlbumDigitalRemasterArgs = {
  id: Scalars['ID']['input'];
};


export type AlbumDigitalRemastersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of AppleLogin */
export type AppleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  identityToken: Scalars['String']['input'];
  lastName?: InputMaybe<Scalars['String']['input']>;
  userIdentifier: Scalars['String']['input'];
};

export type Attachment = {
  __typename?: 'Attachment';
  blob: Blob;
  blobId: Scalars['ID']['output'];
  byteSize: Scalars['Int']['output'];
  contentType: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url: Scalars['String']['output'];
};

export type AttributeError = {
  __typename?: 'AttributeError';
  attribute: Scalars['String']['output'];
  errors: Array<Scalars['String']['output']>;
};

export type AudioVariant = {
  __typename?: 'AudioVariant';
  audioFile?: Maybe<Attachment>;
  bitRate?: Maybe<Scalars['Int']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  digitalRemaster: DigitalRemaster;
  digitalRemasterId: Scalars['ID']['output'];
  format: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for AudioVariant. */
export type AudioVariantConnection = {
  __typename?: 'AudioVariantConnection';
  /** A list of edges. */
  edges: Array<AudioVariantEdge>;
  /** A list of nodes. */
  nodes: Array<AudioVariant>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AudioVariantEdge = {
  __typename?: 'AudioVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<AudioVariant>;
};

export type AuthenticatedUser = {
  __typename?: 'AuthenticatedUser';
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  session: Session;
  username?: Maybe<Scalars['String']['output']>;
};

export type Blob = {
  __typename?: 'Blob';
  byteSize: Scalars['Int']['output'];
  contentType: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  metadata?: Maybe<Scalars['JSON']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url: Scalars['String']['output'];
};


export type BlobUrlArgs = {
  format?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Int']['input']>;
  resizingType?: InputMaybe<Scalars['String']['input']>;
  width?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of ChangePlaylistItemPosition */
export type ChangePlaylistItemPositionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
  position: Scalars['Int']['input'];
};

/** Autogenerated return type of ChangePlaylistItemPosition. */
export type ChangePlaylistItemPositionPayload = {
  __typename?: 'ChangePlaylistItemPositionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
};

export type Composer = {
  __typename?: 'Composer';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositionRole: CompositionRole;
  compositionRoles: CompositionRoleConnection;
  compositions: CompositionConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraRole: OrchestraRole;
  orchestraRoles: OrchestraRoleConnection;
  orchestras: OrchestraConnection;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};


export type ComposerCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerCompositionRoleArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerCompositionRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComposerCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComposerOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerOrchestraRoleArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerOrchestraRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComposerOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComposerRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ComposerRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composer. */
export type ComposerConnection = {
  __typename?: 'ComposerConnection';
  /** A list of edges. */
  edges: Array<ComposerEdge>;
  /** A list of nodes. */
  nodes: Array<Composer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ComposerEdge = {
  __typename?: 'ComposerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composer>;
};

export type Composition = {
  __typename?: 'Composition';
  compositionLyric: CompositionLyric;
  compositionLyrics: CompositionLyricConnection;
  compositionRole: CompositionRole;
  compositionRoles: CompositionRoleConnection;
  id?: Maybe<Scalars['ID']['output']>;
  lyric: Lyric;
  lyrics: LyricConnection;
  recording: Recording;
  recordings: RecordingConnection;
  title?: Maybe<Scalars['String']['output']>;
};


export type CompositionCompositionLyricArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionCompositionLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type CompositionCompositionRoleArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionCompositionRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type CompositionLyricArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type CompositionRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composition. */
export type CompositionConnection = {
  __typename?: 'CompositionConnection';
  /** A list of edges. */
  edges: Array<CompositionEdge>;
  /** A list of nodes. */
  nodes: Array<Composition>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CompositionEdge = {
  __typename?: 'CompositionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composition>;
};

export type CompositionLyric = {
  __typename?: 'CompositionLyric';
  composition: Composition;
  compositionId: Scalars['ID']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lyric: Lyric;
  lyricId: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for CompositionLyric. */
export type CompositionLyricConnection = {
  __typename?: 'CompositionLyricConnection';
  /** A list of edges. */
  edges: Array<CompositionLyricEdge>;
  /** A list of nodes. */
  nodes: Array<CompositionLyric>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CompositionLyricEdge = {
  __typename?: 'CompositionLyricEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<CompositionLyric>;
};

export type CompositionRole = {
  __typename?: 'CompositionRole';
  composition: Composition;
  compositionId: Scalars['ID']['output'];
  id?: Maybe<Scalars['ID']['output']>;
  person: Person;
  personId: Scalars['ID']['output'];
  role: CompositionRoleRole;
};

/** The connection type for CompositionRole. */
export type CompositionRoleConnection = {
  __typename?: 'CompositionRoleConnection';
  /** A list of edges. */
  edges: Array<CompositionRoleEdge>;
  /** A list of nodes. */
  nodes: Array<CompositionRole>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CompositionRoleEdge = {
  __typename?: 'CompositionRoleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<CompositionRole>;
};

export enum CompositionRoleRole {
  /** Composer */
  Composer = 'composer',
  /** Lyricist */
  Lyricist = 'lyricist'
}

/** Autogenerated input type of CreatePlayback */
export type CreatePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlayback. */
export type CreatePlaybackPayload = {
  __typename?: 'CreatePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  playback?: Maybe<Playback>;
};

/** Autogenerated input type of CreatePlaylist */
export type CreatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['Upload']['input']>;
  itemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePlaylist. */
export type CreatePlaylistPayload = {
  __typename?: 'CreatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlist?: Maybe<Playlist>;
};

/** Autogenerated input type of DeletePlaylist */
export type DeletePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlaylist. */
export type DeletePlaylistPayload = {
  __typename?: 'DeletePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type DigitalRemaster = {
  __typename?: 'DigitalRemaster';
  album: Album;
  albumId: Scalars['ID']['output'];
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  bpm?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  externalId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  peakValue?: Maybe<Scalars['Float']['output']>;
  recording: Recording;
  recordingId: Scalars['ID']['output'];
  remasterAgent?: Maybe<RemasterAgent>;
  remasterAgentId?: Maybe<Scalars['ID']['output']>;
  replayGain?: Maybe<Scalars['Float']['output']>;
  tangoCloudId: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
  waveform: Waveform;
  waveformId: Scalars['ID']['output'];
};


export type DigitalRemasterAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type DigitalRemasterAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for DigitalRemaster. */
export type DigitalRemasterConnection = {
  __typename?: 'DigitalRemasterConnection';
  /** A list of edges. */
  edges: Array<DigitalRemasterEdge>;
  /** A list of nodes. */
  nodes: Array<DigitalRemaster>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DigitalRemasterEdge = {
  __typename?: 'DigitalRemasterEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<DigitalRemaster>;
};

export type ElRecodoOrchestra = {
  __typename?: 'ElRecodoOrchestra';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
  people: ElRecodoPersonConnection;
  person: ElRecodoPerson;
  personRole: ElRecodoPersonRole;
  personRoles: ElRecodoPersonRoleConnection;
  song: ElRecodoSong;
  songs: ElRecodoSongConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ElRecodoOrchestraPeopleArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ElRecodoOrchestraPersonArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoOrchestraPersonRoleArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoOrchestraPersonRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ElRecodoOrchestraSongArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoOrchestraSongsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type ElRecodoPerson = {
  __typename?: 'ElRecodoPerson';
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  nicknames?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  personRole: ElRecodoPersonRole;
  personRoles: ElRecodoPersonRoleConnection;
  placeOfBirth?: Maybe<Scalars['String']['output']>;
  realName?: Maybe<Scalars['String']['output']>;
  song: ElRecodoSong;
  songs: ElRecodoSongConnection;
  syncedAt: Scalars['ISO8601DateTime']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ElRecodoPersonPersonRoleArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoPersonPersonRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ElRecodoPersonSongArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoPersonSongsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for ElRecodoPerson. */
export type ElRecodoPersonConnection = {
  __typename?: 'ElRecodoPersonConnection';
  /** A list of edges. */
  edges: Array<ElRecodoPersonEdge>;
  /** A list of nodes. */
  nodes: Array<ElRecodoPerson>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ElRecodoPersonEdge = {
  __typename?: 'ElRecodoPersonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ElRecodoPerson>;
};

export type ElRecodoPersonRole = {
  __typename?: 'ElRecodoPersonRole';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  person: ElRecodoPerson;
  personId: Scalars['ID']['output'];
  role: Scalars['String']['output'];
  song: ElRecodoSong;
  songId: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for ElRecodoPersonRole. */
export type ElRecodoPersonRoleConnection = {
  __typename?: 'ElRecodoPersonRoleConnection';
  /** A list of edges. */
  edges: Array<ElRecodoPersonRoleEdge>;
  /** A list of nodes. */
  nodes: Array<ElRecodoPersonRole>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ElRecodoPersonRoleEdge = {
  __typename?: 'ElRecodoPersonRoleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ElRecodoPersonRole>;
};

export type ElRecodoSong = {
  __typename?: 'ElRecodoSong';
  createdAt: Scalars['ISO8601DateTime']['output'];
  date: Scalars['ISO8601Date']['output'];
  disk?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  ertNumber: Scalars['Int']['output'];
  formattedTitle?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  instrumental: Scalars['Boolean']['output'];
  label?: Maybe<Scalars['String']['output']>;
  lyrics?: Maybe<Scalars['String']['output']>;
  lyricsYear?: Maybe<Scalars['Int']['output']>;
  matrix?: Maybe<Scalars['String']['output']>;
  orchestra: ElRecodoOrchestra;
  orchestraId: Scalars['ID']['output'];
  pageUpdatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  people: ElRecodoPersonConnection;
  person: ElRecodoPerson;
  personRole: ElRecodoPersonRole;
  personRoles: ElRecodoPersonRoleConnection;
  speed?: Maybe<Scalars['Int']['output']>;
  style?: Maybe<Scalars['String']['output']>;
  syncedAt: Scalars['ISO8601DateTime']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ElRecodoSongPeopleArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type ElRecodoSongPersonArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoSongPersonRoleArgs = {
  id: Scalars['ID']['input'];
};


export type ElRecodoSongPersonRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for ElRecodoSong. */
export type ElRecodoSongConnection = {
  __typename?: 'ElRecodoSongConnection';
  /** A list of edges. */
  edges: Array<ElRecodoSongEdge>;
  /** A list of nodes. */
  nodes: Array<ElRecodoSong>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ElRecodoSongEdge = {
  __typename?: 'ElRecodoSongEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ElRecodoSong>;
};

export type Errors = {
  __typename?: 'Errors';
  attributeErrors: Array<AttributeError>;
  fullMessages: Array<Scalars['String']['output']>;
};

export type FailedLogin = {
  __typename?: 'FailedLogin';
  error: Scalars['String']['output'];
};

export type FailedRefresh = {
  __typename?: 'FailedRefresh';
  error: Scalars['String']['output'];
};

export type Genre = {
  __typename?: 'Genre';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type GenreRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type GenreRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Genre. */
export type GenreConnection = {
  __typename?: 'GenreConnection';
  /** A list of edges. */
  edges: Array<GenreEdge>;
  /** A list of nodes. */
  nodes: Array<Genre>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type GenreEdge = {
  __typename?: 'GenreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Genre>;
};

/** Autogenerated input type of GoogleLogin */
export type GoogleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  idToken: Scalars['String']['input'];
};

export type Item = Recording;

export type Language = {
  __typename?: 'Language';
  code: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lyric: Lyric;
  lyrics: LyricConnection;
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type LanguageLyricArgs = {
  id: Scalars['ID']['input'];
};


export type LanguageLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Like = {
  __typename?: 'Like';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  likeableId: Scalars['ID']['output'];
  likeableType: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['ID']['output'];
};

/** The connection type for Like. */
export type LikeConnection = {
  __typename?: 'LikeConnection';
  /** A list of edges. */
  edges: Array<LikeEdge>;
  /** A list of nodes. */
  nodes: Array<Like>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LikeEdge = {
  __typename?: 'LikeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Like>;
};

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

export type LoginResult = AuthenticatedUser | FailedLogin;

export type Lyric = {
  __typename?: 'Lyric';
  composition: Composition;
  compositionId: Scalars['ID']['output'];
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  language: Language;
  languageId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};

/** The connection type for Lyric. */
export type LyricConnection = {
  __typename?: 'LyricConnection';
  /** A list of edges. */
  edges: Array<LyricEdge>;
  /** A list of nodes. */
  nodes: Array<Lyric>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricEdge = {
  __typename?: 'LyricEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyric>;
};

export type Lyricist = {
  __typename?: 'Lyricist';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositionRole: CompositionRole;
  compositionRoles: CompositionRoleConnection;
  compositions: CompositionConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraRole: OrchestraRole;
  orchestraRoles: OrchestraRoleConnection;
  orchestras: OrchestraConnection;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};


export type LyricistCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistCompositionRoleArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistCompositionRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistOrchestraRoleArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistOrchestraRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Lyricist. */
export type LyricistConnection = {
  __typename?: 'LyricistConnection';
  /** A list of edges. */
  edges: Array<LyricistEdge>;
  /** A list of nodes. */
  nodes: Array<Lyricist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricistEdge = {
  __typename?: 'LyricistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyricist>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addLikeToRecording?: Maybe<AddLikeToRecordingPayload>;
  addPlaylistRecording?: Maybe<AddPlaylistRecordingPayload>;
  appleLogin: LoginResult;
  changePlaylistItemPosition?: Maybe<ChangePlaylistItemPositionPayload>;
  createPlayback?: Maybe<CreatePlaybackPayload>;
  createPlaylist?: Maybe<CreatePlaylistPayload>;
  deletePlaylist?: Maybe<DeletePlaylistPayload>;
  googleLogin: LoginResult;
  login: LoginResult;
  refresh: RefreshResult;
  register: RegistrationResult;
  removeLikeFromRecording?: Maybe<RemoveLikeFromRecordingPayload>;
  removePlayback?: Maybe<RemovePlaybackPayload>;
  removePlaylistItem?: Maybe<RemovePlaylistItemPayload>;
  updatePlaylist?: Maybe<UpdatePlaylistPayload>;
  updateUser: UserResult;
};


export type MutationAddLikeToRecordingArgs = {
  input: AddLikeToRecordingInput;
};


export type MutationAddPlaylistRecordingArgs = {
  input: AddPlaylistRecordingInput;
};


export type MutationAppleLoginArgs = {
  input: AppleLoginInput;
};


export type MutationChangePlaylistItemPositionArgs = {
  input: ChangePlaylistItemPositionInput;
};


export type MutationCreatePlaybackArgs = {
  input: CreatePlaybackInput;
};


export type MutationCreatePlaylistArgs = {
  input: CreatePlaylistInput;
};


export type MutationDeletePlaylistArgs = {
  input: DeletePlaylistInput;
};


export type MutationGoogleLoginArgs = {
  input: GoogleLoginInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationRefreshArgs = {
  input: RefreshInput;
};


export type MutationRegisterArgs = {
  input: RegisterInput;
};


export type MutationRemoveLikeFromRecordingArgs = {
  input: RemoveLikeFromRecordingInput;
};


export type MutationRemovePlaybackArgs = {
  input: RemovePlaybackInput;
};


export type MutationRemovePlaylistItemArgs = {
  input: RemovePlaylistItemInput;
};


export type MutationUpdatePlaylistArgs = {
  input: UpdatePlaylistInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateInput;
};

export type Orchestra = {
  __typename?: 'Orchestra';
  composition: Composition;
  compositions: CompositionConnection;
  genre: Genre;
  genres: GenreConnection;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orchestraPeriod: OrchestraPeriod;
  orchestraPeriods: OrchestraPeriodConnection;
  orchestraPosition: OrchestraPosition;
  orchestraPositions: OrchestraPositionConnection;
  orchestraRole: OrchestraRole;
  orchestraRoles: OrchestraRoleConnection;
  recording: Recording;
  recordings: RecordingConnection;
  singer: Singer;
  singers: SingerConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type OrchestraCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraGenreArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraGenresArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraOrchestraPeriodArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraOrchestraPeriodsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraOrchestraPositionArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraOrchestraPositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraOrchestraRoleArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraOrchestraRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraSingerArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Orchestra. */
export type OrchestraConnection = {
  __typename?: 'OrchestraConnection';
  /** A list of edges. */
  edges: Array<OrchestraEdge>;
  /** A list of nodes. */
  nodes: Array<Orchestra>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraEdge = {
  __typename?: 'OrchestraEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Orchestra>;
};

export type OrchestraPeriod = {
  __typename?: 'OrchestraPeriod';
  description?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraId: Scalars['ID']['output'];
  startDate?: Maybe<Scalars['ISO8601Date']['output']>;
};

/** The connection type for OrchestraPeriod. */
export type OrchestraPeriodConnection = {
  __typename?: 'OrchestraPeriodConnection';
  /** A list of edges. */
  edges: Array<OrchestraPeriodEdge>;
  /** A list of nodes. */
  nodes: Array<OrchestraPeriod>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraPeriodEdge = {
  __typename?: 'OrchestraPeriodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<OrchestraPeriod>;
};

export type OrchestraPosition = {
  __typename?: 'OrchestraPosition';
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  endDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  orchestra: Orchestra;
  orchestraId: Scalars['ID']['output'];
  orchestraRole: OrchestraRole;
  orchestraRoleId: Scalars['ID']['output'];
  person: Person;
  personId: Scalars['ID']['output'];
  principal?: Maybe<Scalars['Boolean']['output']>;
  startDate?: Maybe<Scalars['ISO8601Date']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};

/** The connection type for OrchestraPosition. */
export type OrchestraPositionConnection = {
  __typename?: 'OrchestraPositionConnection';
  /** A list of edges. */
  edges: Array<OrchestraPositionEdge>;
  /** A list of nodes. */
  nodes: Array<OrchestraPosition>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraPositionEdge = {
  __typename?: 'OrchestraPositionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<OrchestraPosition>;
};

export type OrchestraRole = {
  __typename?: 'OrchestraRole';
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraPosition: OrchestraPosition;
  orchestraPositions: OrchestraPositionConnection;
  orchestras: OrchestraConnection;
};


export type OrchestraRoleOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraRoleOrchestraPositionArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraRoleOrchestraPositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraRoleOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for OrchestraRole. */
export type OrchestraRoleConnection = {
  __typename?: 'OrchestraRoleConnection';
  /** A list of edges. */
  edges: Array<OrchestraRoleEdge>;
  /** A list of nodes. */
  nodes: Array<OrchestraRole>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraRoleEdge = {
  __typename?: 'OrchestraRoleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<OrchestraRole>;
};

export enum OrderEnum {
  /** Ascending order */
  Asc = 'ASC',
  /** Descending order */
  Desc = 'DESC'
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Person = {
  __typename?: 'Person';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositionRole: CompositionRole;
  compositionRoles: CompositionRoleConnection;
  compositions: CompositionConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraRole: OrchestraRole;
  orchestraRoles: OrchestraRoleConnection;
  orchestras: OrchestraConnection;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};


export type PersonCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type PersonCompositionRoleArgs = {
  id: Scalars['ID']['input'];
};


export type PersonCompositionRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type PersonOrchestraRoleArgs = {
  id: Scalars['ID']['input'];
};


export type PersonOrchestraRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PersonRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type PersonRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Playback = {
  __typename?: 'Playback';
  createdAt: Scalars['ISO8601DateTime']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['ID']['output'];
  user: User;
  userId: Scalars['ID']['output'];
};

/** The connection type for Playback. */
export type PlaybackConnection = {
  __typename?: 'PlaybackConnection';
  /** A list of edges. */
  edges: Array<PlaybackEdge>;
  /** A list of nodes. */
  nodes: Array<Playback>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaybackEdge = {
  __typename?: 'PlaybackEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playback>;
};

export type Playlist = {
  __typename?: 'Playlist';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  like: Like;
  likes: LikeConnection;
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  public: Scalars['Boolean']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  share: Share;
  shares: ShareConnection;
  slug?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  system: Scalars['Boolean']['output'];
  tanda: Tanda;
  tandas: TandaConnection;
  title: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['ID']['output'];
};


export type PlaylistLikeArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistShareArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistSharesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistTandaArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistTandasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Playlist. */
export type PlaylistConnection = {
  __typename?: 'PlaylistConnection';
  /** A list of edges. */
  edges: Array<PlaylistEdge>;
  /** A list of nodes. */
  nodes: Array<Playlist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistEdge = {
  __typename?: 'PlaylistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playlist>;
};

export type PlaylistItem = {
  __typename?: 'PlaylistItem';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  item: Item;
  itemId: Scalars['ID']['output'];
  itemType: Scalars['String']['output'];
  playlist: Playlist;
  playlistId: Scalars['ID']['output'];
  position: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for PlaylistItem. */
export type PlaylistItemConnection = {
  __typename?: 'PlaylistItemConnection';
  /** A list of edges. */
  edges: Array<PlaylistItemEdge>;
  /** A list of nodes. */
  nodes: Array<PlaylistItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistItemEdge = {
  __typename?: 'PlaylistItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaylistItem>;
};

export type Query = {
  __typename?: 'Query';
  audioVariant: AudioVariant;
  composers: ComposerConnection;
  currentUser: User;
  digitalRemaster: DigitalRemaster;
  elRecodoSongs: ElRecodoSongConnection;
  genre: Genre;
  genres: GenreConnection;
  likedRecordings: RecordingConnection;
  lyricists: LyricistConnection;
  orchestra: Orchestra;
  orchestras: OrchestraConnection;
  playlist: Playlist;
  playlists: PlaylistConnection;
  recording: Recording;
  recordings: RecordingConnection;
  searchRecordings: RecordingSearchResults;
  singers: SingerConnection;
  timePeriod: TimePeriod;
  timePeriods: TimePeriodConnection;
  user: User;
  users: UserConnection;
};


export type QueryAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type QueryComposersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDigitalRemasterArgs = {
  id: Scalars['ID']['input'];
};


export type QueryElRecodoSongsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGenreArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGenresArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLikedRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryLyricistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySearchRecordingsArgs = {
  filters?: InputMaybe<RecordingFilterInput>;
  orderBy?: InputMaybe<RecordingOrderByInput>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTimePeriodArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTimePeriodsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};

export type RecordLabel = {
  __typename?: 'RecordLabel';
  bio?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  foundedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
};


export type RecordLabelRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type RecordLabelRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Recording = {
  __typename?: 'Recording';
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  composition?: Maybe<Composition>;
  compositionId?: Maybe<Scalars['ID']['output']>;
  digitalRemaster: DigitalRemaster;
  digitalRemasters: DigitalRemasterConnection;
  elRecodoSong?: Maybe<ElRecodoSong>;
  elRecodoSongId?: Maybe<Scalars['ID']['output']>;
  genre?: Maybe<Genre>;
  genreId?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  like: Like;
  likes: LikeConnection;
  lyric: Lyric;
  lyrics: LyricConnection;
  orchestra?: Maybe<Orchestra>;
  orchestraId?: Maybe<Scalars['ID']['output']>;
  playback: Playback;
  playbacks: PlaybackConnection;
  playbacksCount: Scalars['Int']['output'];
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  recordLabel?: Maybe<RecordLabel>;
  recordLabelId?: Maybe<Scalars['ID']['output']>;
  recordedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordingType: RecordingTypeEnum;
  share: Share;
  shares: ShareConnection;
  singer: Singer;
  singers: SingerConnection;
  slug: Scalars['String']['output'];
  tag: Tag;
  tagging: Tagging;
  taggings: TaggingConnection;
  tags: TagConnection;
  tanda: Tanda;
  tandaRecording: TandaRecording;
  tandaRecordings: TandaRecordingConnection;
  tandas: TandaConnection;
  timePeriod?: Maybe<TimePeriod>;
  timePeriodId?: Maybe<Scalars['ID']['output']>;
  title: Scalars['String']['output'];
  waveform: Waveform;
  waveforms: WaveformConnection;
  year?: Maybe<Scalars['Int']['output']>;
};


export type RecordingAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingDigitalRemasterArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingDigitalRemastersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingLikeArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingLyricArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingShareArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingSharesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingTagArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingTaggingArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingTaggingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingTandaArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingTandaRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingTandaRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingTandasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingWaveformArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingWaveformsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RecordingAggregations = {
  __typename?: 'RecordingAggregations';
  genre: Array<Aggregate>;
  orchestraPeriods: Array<Aggregate>;
  singers: Array<Aggregate>;
  timePeriod: Array<Aggregate>;
};

/** The connection type for Recording. */
export type RecordingConnection = {
  __typename?: 'RecordingConnection';
  /** A list of edges. */
  edges: Array<RecordingEdge>;
  /** A list of nodes. */
  nodes: Array<Recording>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingEdge = {
  __typename?: 'RecordingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Recording>;
};

export type RecordingFilterInput = {
  genres?: InputMaybe<Array<Scalars['String']['input']>>;
  orchestra?: InputMaybe<Scalars['String']['input']>;
  orchestraPeriods?: InputMaybe<Array<Scalars['String']['input']>>;
  roles?: InputMaybe<Array<Scalars['String']['input']>>;
  singers?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type RecordingOrderByInput = {
  /** Field to sort by. */
  field: RecordingOrderFieldEnum;
  /** Sort order, can be 'asc' or 'desc'. */
  order: OrderEnum;
};

export enum RecordingOrderFieldEnum {
  /** Sort by created date */
  CreatedAt = 'CREATED_AT',
  /** Sort by genre */
  Genre = 'GENRE',
  /** Sort by orchestra */
  Orchestra = 'ORCHESTRA',
  /** Sort by playbacks count */
  PlaybacksCount = 'PLAYBACKS_COUNT',
  /** Sort by recorded date */
  RecordedDate = 'RECORDED_DATE',
  /** Sort by recording type */
  RecordingType = 'RECORDING_TYPE',
  /** Sort by record label */
  RecordLabel = 'RECORD_LABEL',
  /** Sort by singers */
  Singers = 'SINGERS',
  /** Sort by time period */
  TimePeriod = 'TIME_PERIOD',
  /** Sort by title */
  Title = 'TITLE',
  /** Sort by updated date */
  UpdatedAt = 'UPDATED_AT'
}

export type RecordingSearchResults = {
  __typename?: 'RecordingSearchResults';
  aggregations: RecordingAggregations;
  recordings: RecordingConnection;
};


export type RecordingSearchResultsRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RecordingSinger = {
  __typename?: 'RecordingSinger';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  person: Person;
  personId: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['ID']['output'];
  soloist: Scalars['Boolean']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for RecordingSinger. */
export type RecordingSingerConnection = {
  __typename?: 'RecordingSingerConnection';
  /** A list of edges. */
  edges: Array<RecordingSingerEdge>;
  /** A list of nodes. */
  nodes: Array<RecordingSinger>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingSingerEdge = {
  __typename?: 'RecordingSingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<RecordingSinger>;
};

export enum RecordingTypeEnum {
  Live = 'live',
  Studio = 'studio'
}

/** Autogenerated input type of Refresh */
export type RefreshInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  refreshToken: Scalars['String']['input'];
};

export type RefreshResult = FailedRefresh | Session;

/** Autogenerated input type of Register */
export type RegisterInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  username?: InputMaybe<Scalars['String']['input']>;
};

export type RegistrationResult = AuthenticatedUser | ValidationError;

export type RemasterAgent = {
  __typename?: 'RemasterAgent';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  digitalRemaster: DigitalRemaster;
  digitalRemasters: DigitalRemasterConnection;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};


export type RemasterAgentDigitalRemasterArgs = {
  id: Scalars['ID']['input'];
};


export type RemasterAgentDigitalRemastersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of RemoveLikeFromRecording */
export type RemoveLikeFromRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveLikeFromRecording. */
export type RemoveLikeFromRecordingPayload = {
  __typename?: 'RemoveLikeFromRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlayback */
export type RemovePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlayback. */
export type RemovePlaybackPayload = {
  __typename?: 'RemovePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlaylistItem */
export type RemovePlaylistItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlaylistItem. */
export type RemovePlaylistItemPayload = {
  __typename?: 'RemovePlaylistItemPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type Session = {
  __typename?: 'Session';
  access?: Maybe<Scalars['String']['output']>;
  accessExpiresAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  refresh?: Maybe<Scalars['String']['output']>;
  refreshExpiresAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
};

export type Share = {
  __typename?: 'Share';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
};

/** The connection type for Share. */
export type ShareConnection = {
  __typename?: 'ShareConnection';
  /** A list of edges. */
  edges: Array<ShareEdge>;
  /** A list of nodes. */
  nodes: Array<Share>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ShareEdge = {
  __typename?: 'ShareEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Share>;
};

export type Singer = {
  __typename?: 'Singer';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositionRole: CompositionRole;
  compositionRoles: CompositionRoleConnection;
  compositions: CompositionConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraRole: OrchestraRole;
  orchestraRoles: OrchestraRoleConnection;
  orchestras: OrchestraConnection;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};


export type SingerCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type SingerCompositionRoleArgs = {
  id: Scalars['ID']['input'];
};


export type SingerCompositionRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type SingerOrchestraRoleArgs = {
  id: Scalars['ID']['input'];
};


export type SingerOrchestraRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Singer. */
export type SingerConnection = {
  __typename?: 'SingerConnection';
  /** A list of edges. */
  edges: Array<SingerEdge>;
  /** A list of nodes. */
  nodes: Array<Singer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SingerEdge = {
  __typename?: 'SingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Singer>;
};

export type Tag = {
  __typename?: 'Tag';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  tagging: Tagging;
  taggings: TaggingConnection;
};


export type TagTaggingArgs = {
  id: Scalars['ID']['input'];
};


export type TagTaggingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Tag. */
export type TagConnection = {
  __typename?: 'TagConnection';
  /** A list of edges. */
  edges: Array<TagEdge>;
  /** A list of nodes. */
  nodes: Array<Tag>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TagEdge = {
  __typename?: 'TagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Tag>;
};

export type Tagging = {
  __typename?: 'Tagging';
  id: Scalars['ID']['output'];
  tag: Tag;
  user: User;
  userId: Scalars['ID']['output'];
};

/** The connection type for Tagging. */
export type TaggingConnection = {
  __typename?: 'TaggingConnection';
  /** A list of edges. */
  edges: Array<TaggingEdge>;
  /** A list of nodes. */
  nodes: Array<Tagging>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TaggingEdge = {
  __typename?: 'TaggingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Tagging>;
};

export type Tanda = {
  __typename?: 'Tanda';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  like: Like;
  likes: LikeConnection;
  playlist: Playlist;
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  playlists: PlaylistConnection;
  public: Scalars['Boolean']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  share: Share;
  shares: ShareConnection;
  subtitle?: Maybe<Scalars['String']['output']>;
  tandaRecording: TandaRecording;
  tandaRecordings: TandaRecordingConnection;
  title: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['ID']['output'];
};


export type TandaLikeArgs = {
  id: Scalars['ID']['input'];
};


export type TandaLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TandaPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type TandaPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type TandaPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TandaPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TandaRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type TandaRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TandaShareArgs = {
  id: Scalars['ID']['input'];
};


export type TandaSharesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TandaTandaRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type TandaTandaRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Tanda. */
export type TandaConnection = {
  __typename?: 'TandaConnection';
  /** A list of edges. */
  edges: Array<TandaEdge>;
  /** A list of nodes. */
  nodes: Array<Tanda>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TandaEdge = {
  __typename?: 'TandaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Tanda>;
};

export type TandaRecording = {
  __typename?: 'TandaRecording';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  position: Scalars['Int']['output'];
  recording: Recording;
  recordingId: Scalars['ID']['output'];
  tanda: Tanda;
  tandaId: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for TandaRecording. */
export type TandaRecordingConnection = {
  __typename?: 'TandaRecordingConnection';
  /** A list of edges. */
  edges: Array<TandaRecordingEdge>;
  /** A list of nodes. */
  nodes: Array<TandaRecording>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TandaRecordingEdge = {
  __typename?: 'TandaRecordingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<TandaRecording>;
};

export type TimePeriod = {
  __typename?: 'TimePeriod';
  description?: Maybe<Scalars['String']['output']>;
  endYear?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  image?: Maybe<Attachment>;
  name?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  startYear?: Maybe<Scalars['Int']['output']>;
};


export type TimePeriodRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type TimePeriodRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for TimePeriod. */
export type TimePeriodConnection = {
  __typename?: 'TimePeriodConnection';
  /** A list of edges. */
  edges: Array<TimePeriodEdge>;
  /** A list of nodes. */
  nodes: Array<TimePeriod>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TimePeriodEdge = {
  __typename?: 'TimePeriodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<TimePeriod>;
};

/** Autogenerated input type of Update */
export type UpdateInput = {
  avatar?: InputMaybe<Scalars['Upload']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of UpdatePlaylist */
export type UpdatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<Scalars['Upload']['input']>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePlaylist. */
export type UpdatePlaylistPayload = {
  __typename?: 'UpdatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  playlist?: Maybe<Playlist>;
};

export type User = {
  __typename?: 'User';
  admin: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  like: Like;
  likedRecording: Recording;
  likedRecordings: RecordingConnection;
  likes: LikeConnection;
  playback: Playback;
  playbacks: PlaybackConnection;
  playlist: Playlist;
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  playlists: PlaylistConnection;
  provider?: Maybe<Scalars['String']['output']>;
  share: Share;
  sharedOrchestra: Share;
  sharedOrchestras: ShareConnection;
  sharedPlaylist: Share;
  sharedPlaylists: ShareConnection;
  sharedRecording: Share;
  sharedRecordings: ShareConnection;
  sharedTanda: Share;
  sharedTandas: ShareConnection;
  shares: ShareConnection;
  tag: Tag;
  tagging: Tagging;
  taggings: TaggingConnection;
  tags: TagConnection;
  tanda: Tanda;
  tandas: TandaConnection;
  uid?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  userPreference?: Maybe<UserPreference>;
  username?: Maybe<Scalars['String']['output']>;
};


export type UserLikeArgs = {
  id: Scalars['ID']['input'];
};


export type UserLikedRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type UserLikedRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserShareArgs = {
  id: Scalars['ID']['input'];
};


export type UserSharedOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type UserSharedOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSharedPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type UserSharedPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSharedRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type UserSharedRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSharedTandaArgs = {
  id: Scalars['ID']['input'];
};


export type UserSharedTandasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSharesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserTagArgs = {
  id: Scalars['ID']['input'];
};


export type UserTaggingArgs = {
  id: Scalars['ID']['input'];
};


export type UserTaggingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserTagsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserTandaArgs = {
  id: Scalars['ID']['input'];
};


export type UserTandasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** A list of nodes. */
  nodes: Array<User>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type UserPreference = {
  __typename?: 'UserPreference';
  avatar?: Maybe<Attachment>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['ID']['output'];
};

export type UserResult = User | ValidationError;

export type ValidationError = {
  __typename?: 'ValidationError';
  errors: Errors;
};

export type Waveform = {
  __typename?: 'Waveform';
  bits: Scalars['Int']['output'];
  channels: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  data: Array<Scalars['Float']['output']>;
  digitalRemaster: DigitalRemaster;
  digitalRemasterId: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  image?: Maybe<Attachment>;
  length: Scalars['Int']['output'];
  sampleRate: Scalars['Int']['output'];
  samplesPerPixel: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  version: Scalars['Int']['output'];
};

/** The connection type for Waveform. */
export type WaveformConnection = {
  __typename?: 'WaveformConnection';
  /** A list of edges. */
  edges: Array<WaveformEdge>;
  /** A list of nodes. */
  nodes: Array<Waveform>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type WaveformEdge = {
  __typename?: 'WaveformEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Waveform>;
};

export type AppleLoginMutationVariables = Exact<{
  userIdentifier: Scalars['String']['input'];
  identityToken: Scalars['String']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
}>;


export type AppleLoginMutation = { __typename?: 'Mutation', appleLogin: { __typename: 'AuthenticatedUser', id?: string | null, email?: string | null, username?: string | null, session: { __typename?: 'Session', access?: string | null, accessExpiresAt?: any | null, refresh?: string | null, refreshExpiresAt?: any | null } } | { __typename: 'FailedLogin', error: string } };

export type CreatePlaybackMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type CreatePlaybackMutation = { __typename?: 'Mutation', createPlayback?: { __typename?: 'CreatePlaybackPayload', errors?: Array<string> | null, playback?: { __typename?: 'Playback', id: string, recording: { __typename?: 'Recording', id: string, title: string }, user: { __typename?: 'User', id: string, username?: string | null } } | null } | null };

export type GoogleLoginMutationVariables = Exact<{
  idToken: Scalars['String']['input'];
}>;


export type GoogleLoginMutation = { __typename?: 'Mutation', googleLogin: { __typename: 'AuthenticatedUser', id?: string | null, email?: string | null, username?: string | null, session: { __typename?: 'Session', access?: string | null, accessExpiresAt?: any | null, refresh?: string | null, refreshExpiresAt?: any | null } } | { __typename: 'FailedLogin', error: string } };

export type LoginMutationVariables = Exact<{
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login: { __typename: 'AuthenticatedUser', id?: string | null, email?: string | null, username?: string | null, session: { __typename?: 'Session', access?: string | null, accessExpiresAt?: any | null, refresh?: string | null, refreshExpiresAt?: any | null } } | { __typename: 'FailedLogin', error: string } };

export type RegisterMutationVariables = Exact<{
  username?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type RegisterMutation = { __typename?: 'Mutation', register: { __typename?: 'AuthenticatedUser', id?: string | null, username?: string | null, email?: string | null, session: { __typename?: 'Session', access?: string | null, accessExpiresAt?: any | null, refresh?: string | null, refreshExpiresAt?: any | null } } | { __typename?: 'ValidationError', errors: { __typename?: 'Errors', fullMessages: Array<string>, attributeErrors: Array<{ __typename?: 'AttributeError', attribute: string, errors: Array<string> }> } } };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', id: string, email: string, username?: string | null, userPreference?: { __typename?: 'UserPreference', firstName?: string | null, lastName?: string | null, avatar?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null } | null } };

export type LikedRecordingsQueryVariables = Exact<{ [key: string]: never; }>;


export type LikedRecordingsQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', likedRecordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, genre?: { __typename?: 'Genre', name: string } | null, digitalRemasters: { __typename?: 'DigitalRemasterConnection', edges: Array<{ __typename?: 'DigitalRemasterEdge', node?: { __typename?: 'DigitalRemaster', duration?: number | null, album: { __typename?: 'Album', albumArt?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null } } | null }> }, recordingSingers: { __typename?: 'RecordingSingerConnection', edges: Array<{ __typename?: 'RecordingSingerEdge', node?: { __typename?: 'RecordingSinger', soloist: boolean, person: { __typename?: 'Person', name?: string | null } } | null }> } } | null }> } } };

export type OrchestrasQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type OrchestrasQuery = { __typename?: 'Query', orchestras: { __typename?: 'OrchestraConnection', edges: Array<{ __typename?: 'OrchestraEdge', node?: { __typename?: 'Orchestra', id?: string | null, name?: string | null, image?: { __typename?: 'Attachment', url: string } | null } | null }> } };

export type PlaylistsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type PlaylistsQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, title: string, description?: string | null, image?: { __typename?: 'Attachment', url: string } | null } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type RecordingsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type RecordingsQuery = { __typename?: 'Query', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, recordedDate?: any | null, orchestra?: { __typename?: 'Orchestra', name?: string | null } | null, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, genre?: { __typename?: 'Genre', name: string } | null, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', id?: string | null, text: string, language: { __typename?: 'Language', name: string } } | null }> } } | null } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type SearchRecordingsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  filters?: InputMaybe<RecordingFilterInput>;
  order_by?: InputMaybe<RecordingOrderByInput>;
}>;


export type SearchRecordingsQuery = { __typename?: 'Query', searchRecordings: { __typename?: 'RecordingSearchResults', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre?: { __typename?: 'Genre', name: string } | null, digitalRemasters: { __typename?: 'DigitalRemasterConnection', edges: Array<{ __typename?: 'DigitalRemasterEdge', node?: { __typename?: 'DigitalRemaster', duration?: number | null, album: { __typename?: 'Album', albumArt?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null } } | null }> }, orchestra?: { __typename?: 'Orchestra', name?: string | null } | null, recordingSingers: { __typename?: 'RecordingSingerConnection', edges: Array<{ __typename?: 'RecordingSingerEdge', node?: { __typename?: 'RecordingSinger', soloist: boolean, person: { __typename?: 'Person', name?: string | null } } | null }> } } | null }> } } };

export type TandaOfTheWeekQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type TandaOfTheWeekQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, description?: string | null, image?: { __typename?: 'Attachment', url: string } | null, playlistItems: { __typename?: 'PlaylistItemConnection', edges: Array<{ __typename?: 'PlaylistItemEdge', node?: { __typename?: 'PlaylistItem', id: string, item: { __typename?: 'Recording', id: string, genre?: { __typename?: 'Genre', name: string } | null, orchestra?: { __typename?: 'Orchestra', name?: string | null } | null, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> } } } | null }> } } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type UserProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type UserProfileQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', id: string, username?: string | null, userPreference?: { __typename?: 'UserPreference', avatar?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null } | null, playbacks: { __typename?: 'PlaybackConnection', edges: Array<{ __typename?: 'PlaybackEdge', node?: { __typename?: 'Playback', recording: { __typename?: 'Recording', id: string, year?: number | null, composition?: { __typename?: 'Composition', title?: string | null } | null, genre?: { __typename?: 'Genre', name: string } | null, orchestra?: { __typename?: 'Orchestra', name?: string | null } | null, digitalRemasters: { __typename?: 'DigitalRemasterConnection', edges: Array<{ __typename?: 'DigitalRemasterEdge', node?: { __typename?: 'DigitalRemaster', duration?: number | null, album: { __typename?: 'Album', albumArt?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null }, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFile?: { __typename?: 'Attachment', blob: { __typename?: 'Blob', url: string } } | null } | null }> } } | null }> } } } | null }> } } };


export const AppleLoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"appleLogin"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIdentifier"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"identityToken"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appleLogin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userIdentifier"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIdentifier"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"identityToken"},"value":{"kind":"Variable","name":{"kind":"Name","value":"identityToken"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AuthenticatedUser"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"session"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"access"}},{"kind":"Field","name":{"kind":"Name","value":"accessExpiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"refresh"}},{"kind":"Field","name":{"kind":"Name","value":"refreshExpiresAt"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FailedLogin"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<AppleLoginMutation, AppleLoginMutationVariables>;
export const CreatePlaybackDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatePlayback"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlayback"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"recordingId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playback"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"recording"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"errors"}}]}}]}}]} as unknown as DocumentNode<CreatePlaybackMutation, CreatePlaybackMutationVariables>;
export const GoogleLoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"googleLogin"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"idToken"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"googleLogin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"idToken"},"value":{"kind":"Variable","name":{"kind":"Name","value":"idToken"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AuthenticatedUser"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"session"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"access"}},{"kind":"Field","name":{"kind":"Name","value":"accessExpiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"refresh"}},{"kind":"Field","name":{"kind":"Name","value":"refreshExpiresAt"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FailedLogin"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<GoogleLoginMutation, GoogleLoginMutationVariables>;
export const LoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"login"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"login"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"login"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"login"},"value":{"kind":"Variable","name":{"kind":"Name","value":"login"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AuthenticatedUser"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"session"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"access"}},{"kind":"Field","name":{"kind":"Name","value":"accessExpiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"refresh"}},{"kind":"Field","name":{"kind":"Name","value":"refreshExpiresAt"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FailedLogin"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<LoginMutation, LoginMutationVariables>;
export const RegisterDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"register"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"register"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AuthenticatedUser"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"session"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"access"}},{"kind":"Field","name":{"kind":"Name","value":"accessExpiresAt"}},{"kind":"Field","name":{"kind":"Name","value":"refresh"}},{"kind":"Field","name":{"kind":"Name","value":"refreshExpiresAt"}}]}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ValidationError"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fullMessages"}},{"kind":"Field","name":{"kind":"Name","value":"attributeErrors"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"attribute"}},{"kind":"Field","name":{"kind":"Name","value":"errors"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<RegisterMutation, RegisterMutationVariables>;
export const CurrentUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"userPreference"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"avatar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<CurrentUserQuery, CurrentUserQueryVariables>;
export const LikedRecordingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"likedRecordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"likedRecordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"digitalRemasters"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"duration"}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArt"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"recordingSingers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"person"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"soloist"}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<LikedRecordingsQuery, LikedRecordingsQueryVariables>;
export const OrchestrasDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Orchestras"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"orchestras"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<OrchestrasQuery, OrchestrasQueryVariables>;
export const PlaylistsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Playlists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playlists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<PlaylistsQuery, PlaylistsQueryVariables>;
export const RecordingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Recordings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"recordedDate"}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyrics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"language"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<RecordingsQuery, RecordingsQueryVariables>;
export const SearchRecordingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"searchRecordings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filters"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"RecordingFilterInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"order_by"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"RecordingOrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"searchRecordings"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"filters"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filters"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"order_by"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"digitalRemasters"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"duration"}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArt"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"recordingSingers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"person"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"soloist"}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<SearchRecordingsQuery, SearchRecordingsQueryVariables>;
export const TandaOfTheWeekDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TandaOfTheWeek"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playlists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"image"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"playlistItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"item"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Recording"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>;
export const UserProfileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"userProfile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"userPreference"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"avatar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"playbacks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recording"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}}]}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"digitalRemasters"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"duration"}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArt"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"blob"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<UserProfileQuery, UserProfileQueryVariables>;
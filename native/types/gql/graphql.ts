/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded date */
  ISO8601Date: { input: any; output: any; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
  /** Represents untyped JSON */
  JSON: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

/** Autogenerated input type of AddLikeToRecording */
export type AddLikeToRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddLikeToRecording. */
export type AddLikeToRecordingPayload = {
  __typename?: 'AddLikeToRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  like?: Maybe<Like>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of AddPlaylistRecording */
export type AddPlaylistRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistId: Scalars['ID']['input'];
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddPlaylistRecording. */
export type AddPlaylistRecordingPayload = {
  __typename?: 'AddPlaylistRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type Album = {
  __typename?: 'Album';
  albumArtUrl?: Maybe<Scalars['String']['output']>;
  albumType?: Maybe<Scalars['String']['output']>;
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioTransfersCount?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  externalId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  releaseDate?: Maybe<Scalars['ISO8601Date']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type AlbumAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type AlbumAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of AppleLogin */
export type AppleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  identityToken: Scalars['String']['input'];
  lastName?: InputMaybe<Scalars['String']['input']>;
  userIdentifier: Scalars['String']['input'];
};

/** Autogenerated return type of AppleLogin. */
export type AppleLoginPayload = {
  __typename?: 'AppleLoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type AudioTransfer = {
  __typename?: 'AudioTransfer';
  album?: Maybe<Album>;
  albumId?: Maybe<Scalars['String']['output']>;
  audioFileUrl?: Maybe<Scalars['String']['output']>;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  filename?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  position?: Maybe<Scalars['Int']['output']>;
  recording?: Maybe<Recording>;
  recordingId?: Maybe<Scalars['String']['output']>;
  transferAgent?: Maybe<TransferAgent>;
  transferAgentId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
  waveform?: Maybe<Waveform>;
};


export type AudioTransferAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type AudioTransferAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type AudioTransferPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type AudioTransferPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for AudioTransfer. */
export type AudioTransferConnection = {
  __typename?: 'AudioTransferConnection';
  /** A list of edges. */
  edges: Array<AudioTransferEdge>;
  /** A list of nodes. */
  nodes: Array<AudioTransfer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AudioTransferEdge = {
  __typename?: 'AudioTransferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<AudioTransfer>;
};

export type AudioVariant = {
  __typename?: 'AudioVariant';
  audioFileUrl?: Maybe<Scalars['String']['output']>;
  audioTransfer: AudioTransfer;
  audioTransferId: Scalars['String']['output'];
  bitRate?: Maybe<Scalars['Int']['output']>;
  channels?: Maybe<Scalars['Int']['output']>;
  codec: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  duration: Scalars['Int']['output'];
  format: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  length: Scalars['Int']['output'];
  metadata: Scalars['JSON']['output'];
  sampleRate?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for AudioVariant. */
export type AudioVariantConnection = {
  __typename?: 'AudioVariantConnection';
  /** A list of edges. */
  edges: Array<AudioVariantEdge>;
  /** A list of nodes. */
  nodes: Array<AudioVariant>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AudioVariantEdge = {
  __typename?: 'AudioVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<AudioVariant>;
};

/** Autogenerated input type of ChangePlaylistItemPosition */
export type ChangePlaylistItemPositionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
  position: Scalars['Int']['input'];
};

/** Autogenerated return type of ChangePlaylistItemPosition. */
export type ChangePlaylistItemPositionPayload = {
  __typename?: 'ChangePlaylistItemPositionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type Composer = {
  __typename?: 'Composer';
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  compositionsCount?: Maybe<Scalars['Int']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name: Scalars['String']['output'];
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type ComposerCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composer. */
export type ComposerConnection = {
  __typename?: 'ComposerConnection';
  /** A list of edges. */
  edges: Array<ComposerEdge>;
  /** A list of nodes. */
  nodes: Array<Composer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ComposerEdge = {
  __typename?: 'ComposerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composer>;
};

export type Composition = {
  __typename?: 'Composition';
  composer?: Maybe<Composer>;
  composerId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lyric: Lyric;
  lyricist?: Maybe<Lyricist>;
  lyricistId?: Maybe<Scalars['String']['output']>;
  lyrics: LyricConnection;
  recording: Recording;
  recordings: RecordingConnection;
  tangotubeSlug?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type CompositionLyricArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type CompositionRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composition. */
export type CompositionConnection = {
  __typename?: 'CompositionConnection';
  /** A list of edges. */
  edges: Array<CompositionEdge>;
  /** A list of nodes. */
  nodes: Array<Composition>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CompositionEdge = {
  __typename?: 'CompositionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composition>;
};

/** Autogenerated input type of CreatePlayback */
export type CreatePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlayback. */
export type CreatePlaybackPayload = {
  __typename?: 'CreatePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playback?: Maybe<Playback>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of CreatePlaylist */
export type CreatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['Upload']['input']>;
  itemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePlaylist. */
export type CreatePlaylistPayload = {
  __typename?: 'CreatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlist?: Maybe<Playlist>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of DeletePlaylist */
export type DeletePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlaylist. */
export type DeletePlaylistPayload = {
  __typename?: 'DeletePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type ElRecodoSong = {
  __typename?: 'ElRecodoSong';
  album?: Maybe<Scalars['String']['output']>;
  artist?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  composer?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['ISO8601Date']['output']>;
  ertNumber?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  lyrics?: Maybe<Scalars['String']['output']>;
  musicId?: Maybe<Scalars['Int']['output']>;
  orchestra?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordingId: Scalars['String']['output'];
  singer?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The connection type for ElRecodoSong. */
export type ElRecodoSongConnection = {
  __typename?: 'ElRecodoSongConnection';
  /** A list of edges. */
  edges: Array<ElRecodoSongEdge>;
  /** A list of nodes. */
  nodes: Array<ElRecodoSong>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ElRecodoSongEdge = {
  __typename?: 'ElRecodoSongEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ElRecodoSong>;
};

export type Event = {
  __typename?: 'Event';
  action: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  ipAddress?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userAgent?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

/** The connection type for Event. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges: Array<EventEdge>;
  /** A list of nodes. */
  nodes: Array<Event>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

export type Genre = {
  __typename?: 'Genre';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type GenreRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type GenreRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Genre. */
export type GenreConnection = {
  __typename?: 'GenreConnection';
  /** A list of edges. */
  edges: Array<GenreEdge>;
  /** A list of nodes. */
  nodes: Array<Genre>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type GenreEdge = {
  __typename?: 'GenreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Genre>;
};

/** Autogenerated input type of GoogleLogin */
export type GoogleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  idToken: Scalars['String']['input'];
};

/** Autogenerated return type of GoogleLogin. */
export type GoogleLoginPayload = {
  __typename?: 'GoogleLoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type Like = {
  __typename?: 'Like';
  createdAt: Scalars['ISO8601DateTime']['output'];
  errors?: Maybe<ValidationErrors>;
  id: Scalars['ID']['output'];
  likeableId: Scalars['ID']['output'];
  likeableType: Scalars['String']['output'];
  user: User;
};

/** The connection type for Like. */
export type LikeConnection = {
  __typename?: 'LikeConnection';
  /** A list of edges. */
  edges: Array<LikeEdge>;
  /** A list of nodes. */
  nodes: Array<Like>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LikeEdge = {
  __typename?: 'LikeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Like>;
};

/** Autogenerated input type of LoginUser */
export type LoginUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

/** Autogenerated return type of LoginUser. */
export type LoginUserPayload = {
  __typename?: 'LoginUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type Lyric = {
  __typename?: 'Lyric';
  composition: Composition;
  compositionId: Scalars['String']['output'];
  content?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  locale?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};

/** The connection type for Lyric. */
export type LyricConnection = {
  __typename?: 'LyricConnection';
  /** A list of edges. */
  edges: Array<LyricEdge>;
  /** A list of nodes. */
  nodes: Array<Lyric>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricEdge = {
  __typename?: 'LyricEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyric>;
};

export type Lyricist = {
  __typename?: 'Lyricist';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  lyric: Lyric;
  lyrics: LyricConnection;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type LyricistCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistLyricArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Lyricist. */
export type LyricistConnection = {
  __typename?: 'LyricistConnection';
  /** A list of edges. */
  edges: Array<LyricistEdge>;
  /** A list of nodes. */
  nodes: Array<Lyricist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricistEdge = {
  __typename?: 'LyricistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyricist>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addLikeToRecording?: Maybe<AddLikeToRecordingPayload>;
  addPlaylistRecording?: Maybe<AddPlaylistRecordingPayload>;
  appleLogin?: Maybe<AppleLoginPayload>;
  changePlaylistItemPosition?: Maybe<ChangePlaylistItemPositionPayload>;
  createPlayback?: Maybe<CreatePlaybackPayload>;
  createPlaylist?: Maybe<CreatePlaylistPayload>;
  deletePlaylist?: Maybe<DeletePlaylistPayload>;
  googleLogin?: Maybe<GoogleLoginPayload>;
  login?: Maybe<LoginUserPayload>;
  register?: Maybe<RegisterUserPayload>;
  removeLikeFromRecording?: Maybe<RemoveLikeFromRecordingPayload>;
  removePlayback?: Maybe<RemovePlaybackPayload>;
  removePlaylistItem?: Maybe<RemovePlaylistItemPayload>;
  updatePlaylist?: Maybe<UpdatePlaylistPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationAddLikeToRecordingArgs = {
  input: AddLikeToRecordingInput;
};


export type MutationAddPlaylistRecordingArgs = {
  input: AddPlaylistRecordingInput;
};


export type MutationAppleLoginArgs = {
  input: AppleLoginInput;
};


export type MutationChangePlaylistItemPositionArgs = {
  input: ChangePlaylistItemPositionInput;
};


export type MutationCreatePlaybackArgs = {
  input: CreatePlaybackInput;
};


export type MutationCreatePlaylistArgs = {
  input: CreatePlaylistInput;
};


export type MutationDeletePlaylistArgs = {
  input: DeletePlaylistInput;
};


export type MutationGoogleLoginArgs = {
  input: GoogleLoginInput;
};


export type MutationLoginArgs = {
  input: LoginUserInput;
};


export type MutationRegisterArgs = {
  input: RegisterUserInput;
};


export type MutationRemoveLikeFromRecordingArgs = {
  input: RemoveLikeFromRecordingInput;
};


export type MutationRemovePlaybackArgs = {
  input: RemovePlaybackInput;
};


export type MutationRemovePlaylistItemArgs = {
  input: RemovePlaylistItemInput;
};


export type MutationUpdatePlaylistArgs = {
  input: UpdatePlaylistInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type Orchestra = {
  __typename?: 'Orchestra';
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  lyricist: Lyricist;
  lyricists: LyricistConnection;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  recordingsCount?: Maybe<Scalars['Int']['output']>;
  singer: Singer;
  singers: SingerConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type OrchestraCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraLyricistArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraLyricistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraSingerArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Orchestra. */
export type OrchestraConnection = {
  __typename?: 'OrchestraConnection';
  /** A list of edges. */
  edges: Array<OrchestraEdge>;
  /** A list of nodes. */
  nodes: Array<Orchestra>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraEdge = {
  __typename?: 'OrchestraEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Orchestra>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Period = {
  __typename?: 'Period';
  description?: Maybe<Scalars['String']['output']>;
  endYear?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  imageUrl?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  recordingsCount?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  startYear?: Maybe<Scalars['Int']['output']>;
};


export type PeriodRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PeriodRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Period. */
export type PeriodConnection = {
  __typename?: 'PeriodConnection';
  /** A list of edges. */
  edges: Array<PeriodEdge>;
  /** A list of nodes. */
  nodes: Array<Period>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PeriodEdge = {
  __typename?: 'PeriodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Period>;
};

export type Playable = Recording;

export type Playback = {
  __typename?: 'Playback';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['String']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

/** The connection type for Playback. */
export type PlaybackConnection = {
  __typename?: 'PlaybackConnection';
  /** A list of edges. */
  edges: Array<PlaybackEdge>;
  /** A list of nodes. */
  nodes: Array<Playback>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaybackEdge = {
  __typename?: 'PlaybackEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playback>;
};

export type Playlist = {
  __typename?: 'Playlist';
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  followersCount: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  likesCount: Scalars['Int']['output'];
  listensCount: Scalars['Int']['output'];
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  public: Scalars['Boolean']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  sharesCount: Scalars['Int']['output'];
  songsCount: Scalars['Int']['output'];
  system: Scalars['Boolean']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
};


export type PlaylistAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Playlist. */
export type PlaylistConnection = {
  __typename?: 'PlaylistConnection';
  /** A list of edges. */
  edges: Array<PlaylistEdge>;
  /** A list of nodes. */
  nodes: Array<Playlist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistEdge = {
  __typename?: 'PlaylistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playlist>;
};

export type PlaylistItem = {
  __typename?: 'PlaylistItem';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  playable: Playable;
  playableId: Scalars['String']['output'];
  playableType: Scalars['String']['output'];
  playlist: Playlist;
  playlistId: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for PlaylistItem. */
export type PlaylistItemConnection = {
  __typename?: 'PlaylistItemConnection';
  /** A list of edges. */
  edges: Array<PlaylistItemEdge>;
  /** A list of nodes. */
  nodes: Array<PlaylistItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistItemEdge = {
  __typename?: 'PlaylistItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaylistItem>;
};

export type Query = {
  __typename?: 'Query';
  audioTransfer: AudioTransfer;
  audioVariant: AudioVariant;
  composer: Composer;
  composers: ComposerConnection;
  currentUser: User;
  elRecodoSongs: ElRecodoSongConnection;
  genre: Genre;
  genres: GenreConnection;
  likedRecordings: RecordingConnection;
  lyricist: Lyricist;
  lyricists: LyricistConnection;
  orchestra: Orchestra;
  orchestras: OrchestraConnection;
  period: Period;
  periods: PeriodConnection;
  playlist: Playlist;
  playlists: PlaylistConnection;
  recording: Recording;
  recordings: RecordingConnection;
  singer: Singer;
  singers: SingerConnection;
  user: User;
  users: UserConnection;
};


export type QueryAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type QueryComposerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryComposersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryElRecodoSongsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGenreArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGenresArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLikedRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLyricistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryLyricistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPeriodArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPeriodsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySingerArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};

export type RecordLabel = {
  __typename?: 'RecordLabel';
  description?: Maybe<Scalars['String']['output']>;
  foundedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type Recording = {
  __typename?: 'Recording';
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  bpm?: Maybe<Scalars['Int']['output']>;
  composer?: Maybe<Composer>;
  composerId?: Maybe<Scalars['String']['output']>;
  composition?: Maybe<Composition>;
  compositionId?: Maybe<Scalars['String']['output']>;
  elRecodoSong?: Maybe<ElRecodoSong>;
  elRecodoSongId?: Maybe<Scalars['String']['output']>;
  genre: Genre;
  genreId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  like: Like;
  likes: LikeConnection;
  lyricist?: Maybe<Lyricist>;
  lyricistId?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraId: Scalars['String']['output'];
  period?: Maybe<Period>;
  periodId?: Maybe<Scalars['String']['output']>;
  playback: Playback;
  playbacks: PlaybackConnection;
  recordLabel?: Maybe<RecordLabel>;
  recordLabelId?: Maybe<Scalars['String']['output']>;
  recordedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  recordingType: Scalars['String']['output'];
  releaseDate?: Maybe<Scalars['ISO8601Date']['output']>;
  singer: Singer;
  singers: SingerConnection;
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  year?: Maybe<Scalars['Int']['output']>;
};


export type RecordingAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingLikeArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Recording. */
export type RecordingConnection = {
  __typename?: 'RecordingConnection';
  /** A list of edges. */
  edges: Array<RecordingEdge>;
  /** A list of nodes. */
  nodes: Array<Recording>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingEdge = {
  __typename?: 'RecordingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Recording>;
};

export type RecordingSinger = {
  __typename?: 'RecordingSinger';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['String']['output'];
  singer: Singer;
  singerId: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for RecordingSinger. */
export type RecordingSingerConnection = {
  __typename?: 'RecordingSingerConnection';
  /** A list of edges. */
  edges: Array<RecordingSingerEdge>;
  /** A list of nodes. */
  nodes: Array<RecordingSinger>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingSingerEdge = {
  __typename?: 'RecordingSingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<RecordingSinger>;
};

/** Autogenerated input type of RegisterUser */
export type RegisterUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  username: Scalars['String']['input'];
};

/** Autogenerated return type of RegisterUser. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

/** Autogenerated input type of RemoveLikeFromRecording */
export type RemoveLikeFromRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveLikeFromRecording. */
export type RemoveLikeFromRecordingPayload = {
  __typename?: 'RemoveLikeFromRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlayback */
export type RemovePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlayback. */
export type RemovePlaybackPayload = {
  __typename?: 'RemovePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlaylistItem */
export type RemovePlaylistItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlaylistItem. */
export type RemovePlaylistItemPayload = {
  __typename?: 'RemovePlaylistItemPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type Session = {
  __typename?: 'Session';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  ipAddress?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userAgent?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

/** The connection type for Session. */
export type SessionConnection = {
  __typename?: 'SessionConnection';
  /** A list of edges. */
  edges: Array<SessionEdge>;
  /** A list of nodes. */
  nodes: Array<Session>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SessionEdge = {
  __typename?: 'SessionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Session>;
};

export type Singer = {
  __typename?: 'Singer';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  soloist: Scalars['Boolean']['output'];
  sortName?: Maybe<Scalars['String']['output']>;
};


export type SingerRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Singer. */
export type SingerConnection = {
  __typename?: 'SingerConnection';
  /** A list of edges. */
  edges: Array<SingerEdge>;
  /** A list of nodes. */
  nodes: Array<Singer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SingerEdge = {
  __typename?: 'SingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Singer>;
};

export type TransferAgent = {
  __typename?: 'TransferAgent';
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};


export type TransferAgentAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TransferAgentAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TransferAgentRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of UpdatePlaylist */
export type UpdatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<Scalars['Upload']['input']>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePlaylist. */
export type UpdatePlaylistPayload = {
  __typename?: 'UpdatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  playlist?: Maybe<Playlist>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  avatar?: InputMaybe<Scalars['Upload']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateUser. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  admin: Scalars['Boolean']['output'];
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  event: Event;
  events: EventConnection;
  firstName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  like: Like;
  likes: LikeConnection;
  name: Scalars['String']['output'];
  passwordDigest: Scalars['String']['output'];
  playback: Playback;
  playbacks: PlaybackConnection;
  playlist: Playlist;
  playlists: PlaylistConnection;
  provider?: Maybe<Scalars['String']['output']>;
  session: Session;
  sessions: SessionConnection;
  uid?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  username?: Maybe<Scalars['String']['output']>;
  verified: Scalars['Boolean']['output'];
};


export type UserEventArgs = {
  id: Scalars['ID']['input'];
};


export type UserEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserLikeArgs = {
  id: Scalars['ID']['input'];
};


export type UserLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSessionArgs = {
  id: Scalars['ID']['input'];
};


export type UserSessionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** A list of nodes. */
  nodes: Array<User>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type ValidationErrors = {
  __typename?: 'ValidationErrors';
  details: Scalars['String']['output'];
  fullMessages: Array<Scalars['String']['output']>;
};

export type Waveform = {
  __typename?: 'Waveform';
  audioTransfer: AudioTransfer;
  audioTransferId: Scalars['String']['output'];
  bits: Scalars['Int']['output'];
  channels: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  data: Array<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  length: Scalars['Int']['output'];
  sampleRate: Scalars['Int']['output'];
  samplesPerPixel: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  version: Scalars['Int']['output'];
};

export type AddLikeToRecordingMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type AddLikeToRecordingMutation = { __typename?: 'Mutation', addLikeToRecording?: { __typename?: 'AddLikeToRecordingPayload', success: boolean, errors: Array<string>, like?: { __typename?: 'Like', id: string, likeableType: string, likeableId: string, user: { __typename?: 'User', id: string } } | null } | null };

export type AppleLoginMutationVariables = Exact<{
  userIdentifier: Scalars['String']['input'];
  identityToken: Scalars['String']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
}>;


export type AppleLoginMutation = { __typename?: 'Mutation', appleLogin?: { __typename?: 'AppleLoginPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type CreatePlaybackMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type CreatePlaybackMutation = { __typename?: 'Mutation', createPlayback?: { __typename?: 'CreatePlaybackPayload', playback?: { __typename?: 'Playback', id: string, recording: { __typename?: 'Recording', id: string } } | null } | null };

export type GoogleLoginMutationVariables = Exact<{
  idToken: Scalars['String']['input'];
}>;


export type GoogleLoginMutation = { __typename?: 'Mutation', googleLogin?: { __typename?: 'GoogleLoginPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type LoginMutationVariables = Exact<{
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginUserPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type RegisterMutationVariables = Exact<{
  username: Scalars['String']['input'];
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type RegisterMutation = { __typename?: 'Mutation', register?: { __typename?: 'RegisterUserPayload', user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type RemoveLikeFromRecordingMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type RemoveLikeFromRecordingMutation = { __typename?: 'Mutation', removeLikeFromRecording?: { __typename?: 'RemoveLikeFromRecordingPayload', success: boolean, errors: Array<string> } | null };

export type ComposerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ComposerQuery = { __typename?: 'Query', composer: { __typename?: 'Composer', id?: string | null, name: string, compositions: { __typename?: 'CompositionConnection', edges: Array<{ __typename?: 'CompositionEdge', node?: { __typename?: 'Composition', id?: string | null, title?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } | null }> } } };

export type ComposersQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type ComposersQuery = { __typename?: 'Query', composers: { __typename?: 'ComposerConnection', edges: Array<{ __typename?: 'ComposerEdge', node?: { __typename?: 'Composer', id?: string | null, name: string } | null }> } };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', id: string, email: string, username?: string | null, name: string, firstName?: string | null, lastName?: string | null, verified: boolean, admin: boolean, avatarUrl?: string | null, createdAt: any, updatedAt: any, playbacks: { __typename?: 'PlaybackConnection', edges: Array<{ __typename?: 'PlaybackEdge', node?: { __typename?: 'Playback', id: string, recording: { __typename?: 'Recording', id: string, title: string, year?: number | null, orchestra: { __typename?: 'Orchestra', name?: string | null }, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } } | null }> } } };

export type LikedRecordingsQueryVariables = Exact<{ [key: string]: never; }>;


export type LikedRecordingsQuery = { __typename?: 'Query', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, orchestra: { __typename?: 'Orchestra', name?: string | null }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, album?: { __typename?: 'Album', id?: string | null, albumArtUrl?: string | null } | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', id: string, audioFileUrl?: string | null, duration: number } | null }> } } | null }> } } | null }> } };

export type LyricistQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type LyricistQuery = { __typename?: 'Query', lyricist: { __typename?: 'Lyricist', id?: string | null, name?: string | null, compositions: { __typename?: 'CompositionConnection', edges: Array<{ __typename?: 'CompositionEdge', node?: { __typename?: 'Composition', id?: string | null, title?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } | null }> } } };

export type LyricistsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type LyricistsQuery = { __typename?: 'Query', lyricists: { __typename?: 'LyricistConnection', edges: Array<{ __typename?: 'LyricistEdge', node?: { __typename?: 'Lyricist', id?: string | null, name?: string | null } | null }> } };

export type OrchestraQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type OrchestraQuery = { __typename?: 'Query', orchestra: { __typename?: 'Orchestra', id?: string | null, name?: string | null, photoUrl?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } };

export type OrchestrasQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type OrchestrasQuery = { __typename?: 'Query', orchestras: { __typename?: 'OrchestraConnection', edges: Array<{ __typename?: 'OrchestraEdge', node?: { __typename?: 'Orchestra', id?: string | null, name?: string | null, photoUrl?: string | null, recordingsCount?: number | null } | null }> } };

export type PlaylistsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type PlaylistsQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, title: string, description?: string | null, imageUrl?: string | null } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type RecordingQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RecordingQuery = { __typename?: 'Query', recording: { __typename?: 'Recording', audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> } } | null }> } } };

export type RecordingsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type RecordingsQuery = { __typename?: 'Query', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, recordedDate?: any | null, year?: number | null, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, genre: { __typename?: 'Genre', name: string }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', id: string, duration: number, audioFileUrl?: string | null } | null }> } } | null }> } } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type SingerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SingerQuery = { __typename?: 'Query', singer: { __typename?: 'Singer', id?: string | null, name?: string | null, photoUrl?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } };

export type SingersQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type SingersQuery = { __typename?: 'Query', singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', id?: string | null, name?: string | null, photoUrl?: string | null } | null }> } };

export type TandaOfTheWeekQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type TandaOfTheWeekQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, title: string, description?: string | null, imageUrl?: string | null, playlistItems: { __typename?: 'PlaylistItemConnection', edges: Array<{ __typename?: 'PlaylistItemEdge', node?: { __typename?: 'PlaylistItem', id: string, playable: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } } | null }> } } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type UserQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UserQuery = { __typename?: 'Query', user: { __typename?: 'User', id: string, name: string, email: string, username?: string | null, firstName?: string | null, lastName?: string | null, admin: boolean } };


export const AddLikeToRecordingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddLikeToRecording"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addLikeToRecording"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"recordingId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"like"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"likeableType"}},{"kind":"Field","name":{"kind":"Name","value":"likeableId"}},{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"success"}},{"kind":"Field","name":{"kind":"Name","value":"errors"}}]}}]}}]} as unknown as DocumentNode<AddLikeToRecordingMutation, AddLikeToRecordingMutationVariables>;
export const AppleLoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"appleLogin"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"userIdentifier"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"identityToken"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appleLogin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"userIdentifier"},"value":{"kind":"Variable","name":{"kind":"Name","value":"userIdentifier"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"identityToken"},"value":{"kind":"Variable","name":{"kind":"Name","value":"identityToken"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"firstName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"firstName"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lastName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lastName"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}},{"kind":"Field","name":{"kind":"Name","value":"token"}}]}}]}}]} as unknown as DocumentNode<AppleLoginMutation, AppleLoginMutationVariables>;
export const CreatePlaybackDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreatePlayback"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createPlayback"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"recordingId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playback"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"recording"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}}]} as unknown as DocumentNode<CreatePlaybackMutation, CreatePlaybackMutationVariables>;
export const GoogleLoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"googleLogin"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"idToken"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"googleLogin"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"idToken"},"value":{"kind":"Variable","name":{"kind":"Name","value":"idToken"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}},{"kind":"Field","name":{"kind":"Name","value":"token"}}]}}]}}]} as unknown as DocumentNode<GoogleLoginMutation, GoogleLoginMutationVariables>;
export const LoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"login"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"login"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"login"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"login"},"value":{"kind":"Variable","name":{"kind":"Name","value":"login"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}},{"kind":"Field","name":{"kind":"Name","value":"token"}}]}}]}}]} as unknown as DocumentNode<LoginMutation, LoginMutationVariables>;
export const RegisterDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Register"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"email"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"register"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"email"},"value":{"kind":"Variable","name":{"kind":"Name","value":"email"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]}}]} as unknown as DocumentNode<RegisterMutation, RegisterMutationVariables>;
export const RemoveLikeFromRecordingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveLikeFromRecording"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeLikeFromRecording"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"recordingId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recordingId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"success"}},{"kind":"Field","name":{"kind":"Name","value":"errors"}}]}}]}}]} as unknown as DocumentNode<RemoveLikeFromRecordingMutation, RemoveLikeFromRecordingMutationVariables>;
export const ComposerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Composer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"composer"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"compositions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<ComposerQuery, ComposerQueryVariables>;
export const ComposersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Composers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"composers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<ComposersQuery, ComposersQueryVariables>;
export const CurrentUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CurrentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"currentUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"verified"}},{"kind":"Field","name":{"kind":"Name","value":"admin"}},{"kind":"Field","name":{"kind":"Name","value":"avatarUrl"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}},{"kind":"Field","name":{"kind":"Name","value":"playbacks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"recording"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyrics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locale"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<CurrentUserQuery, CurrentUserQueryVariables>;
export const LikedRecordingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LikedRecordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyrics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locale"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<LikedRecordingsQuery, LikedRecordingsQueryVariables>;
export const LyricistDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Lyricist"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyricist"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"compositions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<LyricistQuery, LyricistQueryVariables>;
export const LyricistsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Lyricists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyricists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]}}]} as unknown as DocumentNode<LyricistsQuery, LyricistsQueryVariables>;
export const OrchestraDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Orchestra"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photoUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<OrchestraQuery, OrchestraQueryVariables>;
export const OrchestrasDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Orchestras"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"orchestras"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photoUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordingsCount"}}]}}]}}]}}]}}]} as unknown as DocumentNode<OrchestrasQuery, OrchestrasQueryVariables>;
export const PlaylistsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Playlists"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playlists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"imageUrl"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<PlaylistsQuery, PlaylistsQueryVariables>;
export const RecordingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Recording"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recording"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<RecordingQuery, RecordingQueryVariables>;
export const RecordingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Recordings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"order"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"after"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recordings"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"sortBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"sortBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"order"},"value":{"kind":"Variable","name":{"kind":"Name","value":"order"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}},{"kind":"Argument","name":{"kind":"Name","value":"after"},"value":{"kind":"Variable","name":{"kind":"Name","value":"after"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"recordedDate"}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyrics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locale"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}},{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}}]}}]}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<RecordingsQuery, RecordingsQueryVariables>;
export const SingerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Singer"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"singer"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photoUrl"}},{"kind":"Field","name":{"kind":"Name","value":"recordings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode<SingerQuery, SingerQueryVariables>;
export const SingersDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Singers"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"singers"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"photoUrl"}}]}}]}}]}}]}}]} as unknown as DocumentNode<SingersQuery, SingersQueryVariables>;
export const TandaOfTheWeekDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TandaOfTheWeek"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"query"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"first"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"playlists"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"query"},"value":{"kind":"Variable","name":{"kind":"Name","value":"query"}}},{"kind":"Argument","name":{"kind":"Name","value":"first"},"value":{"kind":"Variable","name":{"kind":"Name","value":"first"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"imageUrl"}},{"kind":"Field","name":{"kind":"Name","value":"playlistItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"playable"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Recording"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"year"}},{"kind":"Field","name":{"kind":"Name","value":"genre"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"orchestra"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"singers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"composition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lyrics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"locale"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioTransfers"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"audioVariants"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"edges"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"node"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"audioFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"duration"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"album"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"albumArtUrl"}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"pageInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"endCursor"}},{"kind":"Field","name":{"kind":"Name","value":"startCursor"}},{"kind":"Field","name":{"kind":"Name","value":"hasNextPage"}},{"kind":"Field","name":{"kind":"Name","value":"hasPreviousPage"}}]}}]}}]}}]} as unknown as DocumentNode<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>;
export const UserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"User"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"admin"}}]}}]}}]} as unknown as DocumentNode<UserQuery, UserQueryVariables>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded date */
  ISO8601Date: { input: any; output: any; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
  /** Represents untyped JSON */
  JSON: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

/** Autogenerated input type of AddLikeToRecording */
export type AddLikeToRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddLikeToRecording. */
export type AddLikeToRecordingPayload = {
  __typename?: 'AddLikeToRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  like?: Maybe<Like>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of AddPlaylistRecording */
export type AddPlaylistRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistId: Scalars['ID']['input'];
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AddPlaylistRecording. */
export type AddPlaylistRecordingPayload = {
  __typename?: 'AddPlaylistRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type Album = {
  __typename?: 'Album';
  albumArtUrl?: Maybe<Scalars['String']['output']>;
  albumType?: Maybe<Scalars['String']['output']>;
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioTransfersCount?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  externalId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  releaseDate?: Maybe<Scalars['ISO8601Date']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type AlbumAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type AlbumAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of AppleLogin */
export type AppleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  identityToken: Scalars['String']['input'];
  lastName?: InputMaybe<Scalars['String']['input']>;
  userIdentifier: Scalars['String']['input'];
};

/** Autogenerated return type of AppleLogin. */
export type AppleLoginPayload = {
  __typename?: 'AppleLoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type AudioTransfer = {
  __typename?: 'AudioTransfer';
  album?: Maybe<Album>;
  albumId?: Maybe<Scalars['String']['output']>;
  audioFileUrl?: Maybe<Scalars['String']['output']>;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  filename?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  position?: Maybe<Scalars['Int']['output']>;
  recording?: Maybe<Recording>;
  recordingId?: Maybe<Scalars['String']['output']>;
  transferAgent?: Maybe<TransferAgent>;
  transferAgentId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
  waveform?: Maybe<Waveform>;
};


export type AudioTransferAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type AudioTransferAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type AudioTransferPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type AudioTransferPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for AudioTransfer. */
export type AudioTransferConnection = {
  __typename?: 'AudioTransferConnection';
  /** A list of edges. */
  edges: Array<AudioTransferEdge>;
  /** A list of nodes. */
  nodes: Array<AudioTransfer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AudioTransferEdge = {
  __typename?: 'AudioTransferEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<AudioTransfer>;
};

export type AudioVariant = {
  __typename?: 'AudioVariant';
  audioFileUrl?: Maybe<Scalars['String']['output']>;
  audioTransfer: AudioTransfer;
  audioTransferId: Scalars['String']['output'];
  bitRate?: Maybe<Scalars['Int']['output']>;
  channels?: Maybe<Scalars['Int']['output']>;
  codec: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  duration: Scalars['Int']['output'];
  format: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  length: Scalars['Int']['output'];
  metadata: Scalars['JSON']['output'];
  sampleRate?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for AudioVariant. */
export type AudioVariantConnection = {
  __typename?: 'AudioVariantConnection';
  /** A list of edges. */
  edges: Array<AudioVariantEdge>;
  /** A list of nodes. */
  nodes: Array<AudioVariant>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AudioVariantEdge = {
  __typename?: 'AudioVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<AudioVariant>;
};

/** Autogenerated input type of ChangePlaylistItemPosition */
export type ChangePlaylistItemPositionInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
  position: Scalars['Int']['input'];
};

/** Autogenerated return type of ChangePlaylistItemPosition. */
export type ChangePlaylistItemPositionPayload = {
  __typename?: 'ChangePlaylistItemPositionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlistItem?: Maybe<PlaylistItem>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

export type Composer = {
  __typename?: 'Composer';
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  compositionsCount?: Maybe<Scalars['Int']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name: Scalars['String']['output'];
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type ComposerCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type ComposerCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composer. */
export type ComposerConnection = {
  __typename?: 'ComposerConnection';
  /** A list of edges. */
  edges: Array<ComposerEdge>;
  /** A list of nodes. */
  nodes: Array<Composer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ComposerEdge = {
  __typename?: 'ComposerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composer>;
};

export type Composition = {
  __typename?: 'Composition';
  composer?: Maybe<Composer>;
  composerId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lyric: Lyric;
  lyricist?: Maybe<Lyricist>;
  lyricistId?: Maybe<Scalars['String']['output']>;
  lyrics: LyricConnection;
  recording: Recording;
  recordings: RecordingConnection;
  tangotubeSlug?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};


export type CompositionLyricArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type CompositionRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type CompositionRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Composition. */
export type CompositionConnection = {
  __typename?: 'CompositionConnection';
  /** A list of edges. */
  edges: Array<CompositionEdge>;
  /** A list of nodes. */
  nodes: Array<Composition>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CompositionEdge = {
  __typename?: 'CompositionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Composition>;
};

/** Autogenerated input type of CreatePlayback */
export type CreatePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlayback. */
export type CreatePlaybackPayload = {
  __typename?: 'CreatePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playback?: Maybe<Playback>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of CreatePlaylist */
export type CreatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['Upload']['input']>;
  itemIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePlaylist. */
export type CreatePlaylistPayload = {
  __typename?: 'CreatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  playlist?: Maybe<Playlist>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of DeletePlaylist */
export type DeletePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlaylist. */
export type DeletePlaylistPayload = {
  __typename?: 'DeletePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type ElRecodoSong = {
  __typename?: 'ElRecodoSong';
  album?: Maybe<Scalars['String']['output']>;
  artist?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  composer?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['ISO8601Date']['output']>;
  ertNumber?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  lyrics?: Maybe<Scalars['String']['output']>;
  musicId?: Maybe<Scalars['Int']['output']>;
  orchestra?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordingId: Scalars['String']['output'];
  singer?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The connection type for ElRecodoSong. */
export type ElRecodoSongConnection = {
  __typename?: 'ElRecodoSongConnection';
  /** A list of edges. */
  edges: Array<ElRecodoSongEdge>;
  /** A list of nodes. */
  nodes: Array<ElRecodoSong>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ElRecodoSongEdge = {
  __typename?: 'ElRecodoSongEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<ElRecodoSong>;
};

export type Event = {
  __typename?: 'Event';
  action: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  ipAddress?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userAgent?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

/** The connection type for Event. */
export type EventConnection = {
  __typename?: 'EventConnection';
  /** A list of edges. */
  edges: Array<EventEdge>;
  /** A list of nodes. */
  nodes: Array<Event>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type EventEdge = {
  __typename?: 'EventEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Event>;
};

export type Genre = {
  __typename?: 'Genre';
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type GenreRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type GenreRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Genre. */
export type GenreConnection = {
  __typename?: 'GenreConnection';
  /** A list of edges. */
  edges: Array<GenreEdge>;
  /** A list of nodes. */
  nodes: Array<Genre>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type GenreEdge = {
  __typename?: 'GenreEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Genre>;
};

/** Autogenerated input type of GoogleLogin */
export type GoogleLoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  idToken: Scalars['String']['input'];
};

/** Autogenerated return type of GoogleLogin. */
export type GoogleLoginPayload = {
  __typename?: 'GoogleLoginPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type Like = {
  __typename?: 'Like';
  createdAt: Scalars['ISO8601DateTime']['output'];
  errors?: Maybe<ValidationErrors>;
  id: Scalars['ID']['output'];
  likeableId: Scalars['ID']['output'];
  likeableType: Scalars['String']['output'];
  user: User;
};

/** The connection type for Like. */
export type LikeConnection = {
  __typename?: 'LikeConnection';
  /** A list of edges. */
  edges: Array<LikeEdge>;
  /** A list of nodes. */
  nodes: Array<Like>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LikeEdge = {
  __typename?: 'LikeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Like>;
};

/** Autogenerated input type of LoginUser */
export type LoginUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

/** Autogenerated return type of LoginUser. */
export type LoginUserPayload = {
  __typename?: 'LoginUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type Lyric = {
  __typename?: 'Lyric';
  composition: Composition;
  compositionId: Scalars['String']['output'];
  content?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  locale?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601Date']['output']>;
};

/** The connection type for Lyric. */
export type LyricConnection = {
  __typename?: 'LyricConnection';
  /** A list of edges. */
  edges: Array<LyricEdge>;
  /** A list of nodes. */
  nodes: Array<Lyric>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricEdge = {
  __typename?: 'LyricEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyric>;
};

export type Lyricist = {
  __typename?: 'Lyricist';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  lyric: Lyric;
  lyrics: LyricConnection;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type LyricistCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type LyricistLyricArgs = {
  id: Scalars['ID']['input'];
};


export type LyricistLyricsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Lyricist. */
export type LyricistConnection = {
  __typename?: 'LyricistConnection';
  /** A list of edges. */
  edges: Array<LyricistEdge>;
  /** A list of nodes. */
  nodes: Array<Lyricist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LyricistEdge = {
  __typename?: 'LyricistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Lyricist>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addLikeToRecording?: Maybe<AddLikeToRecordingPayload>;
  addPlaylistRecording?: Maybe<AddPlaylistRecordingPayload>;
  appleLogin?: Maybe<AppleLoginPayload>;
  changePlaylistItemPosition?: Maybe<ChangePlaylistItemPositionPayload>;
  createPlayback?: Maybe<CreatePlaybackPayload>;
  createPlaylist?: Maybe<CreatePlaylistPayload>;
  deletePlaylist?: Maybe<DeletePlaylistPayload>;
  googleLogin?: Maybe<GoogleLoginPayload>;
  login?: Maybe<LoginUserPayload>;
  register?: Maybe<RegisterUserPayload>;
  removeLikeFromRecording?: Maybe<RemoveLikeFromRecordingPayload>;
  removePlayback?: Maybe<RemovePlaybackPayload>;
  removePlaylistItem?: Maybe<RemovePlaylistItemPayload>;
  updatePlaylist?: Maybe<UpdatePlaylistPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationAddLikeToRecordingArgs = {
  input: AddLikeToRecordingInput;
};


export type MutationAddPlaylistRecordingArgs = {
  input: AddPlaylistRecordingInput;
};


export type MutationAppleLoginArgs = {
  input: AppleLoginInput;
};


export type MutationChangePlaylistItemPositionArgs = {
  input: ChangePlaylistItemPositionInput;
};


export type MutationCreatePlaybackArgs = {
  input: CreatePlaybackInput;
};


export type MutationCreatePlaylistArgs = {
  input: CreatePlaylistInput;
};


export type MutationDeletePlaylistArgs = {
  input: DeletePlaylistInput;
};


export type MutationGoogleLoginArgs = {
  input: GoogleLoginInput;
};


export type MutationLoginArgs = {
  input: LoginUserInput;
};


export type MutationRegisterArgs = {
  input: RegisterUserInput;
};


export type MutationRemoveLikeFromRecordingArgs = {
  input: RemoveLikeFromRecordingInput;
};


export type MutationRemovePlaybackArgs = {
  input: RemovePlaybackInput;
};


export type MutationRemovePlaylistItemArgs = {
  input: RemovePlaylistItemInput;
};


export type MutationUpdatePlaylistArgs = {
  input: UpdatePlaylistInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type Orchestra = {
  __typename?: 'Orchestra';
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  composition: Composition;
  compositions: CompositionConnection;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  lyricist: Lyricist;
  lyricists: LyricistConnection;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  recordingsCount?: Maybe<Scalars['Int']['output']>;
  singer: Singer;
  singers: SingerConnection;
  slug?: Maybe<Scalars['String']['output']>;
  sortName?: Maybe<Scalars['String']['output']>;
};


export type OrchestraCompositionArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraCompositionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraLyricistArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraLyricistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type OrchestraSingerArgs = {
  id: Scalars['ID']['input'];
};


export type OrchestraSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Orchestra. */
export type OrchestraConnection = {
  __typename?: 'OrchestraConnection';
  /** A list of edges. */
  edges: Array<OrchestraEdge>;
  /** A list of nodes. */
  nodes: Array<Orchestra>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OrchestraEdge = {
  __typename?: 'OrchestraEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Orchestra>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type Period = {
  __typename?: 'Period';
  description?: Maybe<Scalars['String']['output']>;
  endYear?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  imageUrl?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  recording: Recording;
  recordings: RecordingConnection;
  recordingsCount?: Maybe<Scalars['Int']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  startYear?: Maybe<Scalars['Int']['output']>;
};


export type PeriodRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PeriodRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Period. */
export type PeriodConnection = {
  __typename?: 'PeriodConnection';
  /** A list of edges. */
  edges: Array<PeriodEdge>;
  /** A list of nodes. */
  nodes: Array<Period>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PeriodEdge = {
  __typename?: 'PeriodEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Period>;
};

export type Playable = Recording;

export type Playback = {
  __typename?: 'Playback';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['String']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

/** The connection type for Playback. */
export type PlaybackConnection = {
  __typename?: 'PlaybackConnection';
  /** A list of edges. */
  edges: Array<PlaybackEdge>;
  /** A list of nodes. */
  nodes: Array<Playback>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaybackEdge = {
  __typename?: 'PlaybackEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playback>;
};

export type Playlist = {
  __typename?: 'Playlist';
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  followersCount: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  likesCount: Scalars['Int']['output'];
  listensCount: Scalars['Int']['output'];
  playlistItem: PlaylistItem;
  playlistItems: PlaylistItemConnection;
  public: Scalars['Boolean']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  sharesCount: Scalars['Int']['output'];
  songsCount: Scalars['Int']['output'];
  system: Scalars['Boolean']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
};


export type PlaylistAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistPlaylistItemArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistPlaylistItemsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type PlaylistRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type PlaylistRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Playlist. */
export type PlaylistConnection = {
  __typename?: 'PlaylistConnection';
  /** A list of edges. */
  edges: Array<PlaylistEdge>;
  /** A list of nodes. */
  nodes: Array<Playlist>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistEdge = {
  __typename?: 'PlaylistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Playlist>;
};

export type PlaylistItem = {
  __typename?: 'PlaylistItem';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  playable: Playable;
  playableId: Scalars['String']['output'];
  playableType: Scalars['String']['output'];
  playlist: Playlist;
  playlistId: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for PlaylistItem. */
export type PlaylistItemConnection = {
  __typename?: 'PlaylistItemConnection';
  /** A list of edges. */
  edges: Array<PlaylistItemEdge>;
  /** A list of nodes. */
  nodes: Array<PlaylistItem>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistItemEdge = {
  __typename?: 'PlaylistItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<PlaylistItem>;
};

export type Query = {
  __typename?: 'Query';
  audioTransfer: AudioTransfer;
  audioVariant: AudioVariant;
  composer: Composer;
  composers: ComposerConnection;
  currentUser: User;
  elRecodoSongs: ElRecodoSongConnection;
  genre: Genre;
  genres: GenreConnection;
  likedRecordings: RecordingConnection;
  lyricist: Lyricist;
  lyricists: LyricistConnection;
  orchestra: Orchestra;
  orchestras: OrchestraConnection;
  period: Period;
  periods: PeriodConnection;
  playlist: Playlist;
  playlists: PlaylistConnection;
  recording: Recording;
  recordings: RecordingConnection;
  singer: Singer;
  singers: SingerConnection;
  user: User;
  users: UserConnection;
};


export type QueryAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type QueryAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type QueryComposerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryComposersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryElRecodoSongsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGenreArgs = {
  id: Scalars['ID']['input'];
};


export type QueryGenresArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLikedRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLyricistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryLyricistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOrchestraArgs = {
  id: Scalars['ID']['input'];
};


export type QueryOrchestrasArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPeriodArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPeriodsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type QueryPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type QueryRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySingerArgs = {
  id: Scalars['ID']['input'];
};


export type QuerySingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  query: Scalars['String']['input'];
};

export type RecordLabel = {
  __typename?: 'RecordLabel';
  description?: Maybe<Scalars['String']['output']>;
  foundedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type Recording = {
  __typename?: 'Recording';
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  bpm?: Maybe<Scalars['Int']['output']>;
  composer?: Maybe<Composer>;
  composerId?: Maybe<Scalars['String']['output']>;
  composition?: Maybe<Composition>;
  compositionId?: Maybe<Scalars['String']['output']>;
  elRecodoSong?: Maybe<ElRecodoSong>;
  elRecodoSongId?: Maybe<Scalars['String']['output']>;
  genre: Genre;
  genreId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  like: Like;
  likes: LikeConnection;
  lyricist?: Maybe<Lyricist>;
  lyricistId?: Maybe<Scalars['String']['output']>;
  orchestra: Orchestra;
  orchestraId: Scalars['String']['output'];
  period?: Maybe<Period>;
  periodId?: Maybe<Scalars['String']['output']>;
  playback: Playback;
  playbacks: PlaybackConnection;
  recordLabel?: Maybe<RecordLabel>;
  recordLabelId?: Maybe<Scalars['String']['output']>;
  recordedDate?: Maybe<Scalars['ISO8601Date']['output']>;
  recordingType: Scalars['String']['output'];
  releaseDate?: Maybe<Scalars['ISO8601Date']['output']>;
  singer: Singer;
  singers: SingerConnection;
  slug: Scalars['String']['output'];
  title: Scalars['String']['output'];
  year?: Maybe<Scalars['Int']['output']>;
};


export type RecordingAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingLikeArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type RecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type RecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Recording. */
export type RecordingConnection = {
  __typename?: 'RecordingConnection';
  /** A list of edges. */
  edges: Array<RecordingEdge>;
  /** A list of nodes. */
  nodes: Array<Recording>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingEdge = {
  __typename?: 'RecordingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Recording>;
};

export type RecordingSinger = {
  __typename?: 'RecordingSinger';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  recording: Recording;
  recordingId: Scalars['String']['output'];
  singer: Singer;
  singerId: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for RecordingSinger. */
export type RecordingSingerConnection = {
  __typename?: 'RecordingSingerConnection';
  /** A list of edges. */
  edges: Array<RecordingSingerEdge>;
  /** A list of nodes. */
  nodes: Array<RecordingSinger>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecordingSingerEdge = {
  __typename?: 'RecordingSingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<RecordingSinger>;
};

/** Autogenerated input type of RegisterUser */
export type RegisterUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  username: Scalars['String']['input'];
};

/** Autogenerated return type of RegisterUser. */
export type RegisterUserPayload = {
  __typename?: 'RegisterUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

/** Autogenerated input type of RemoveLikeFromRecording */
export type RemoveLikeFromRecordingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  recordingId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveLikeFromRecording. */
export type RemoveLikeFromRecordingPayload = {
  __typename?: 'RemoveLikeFromRecordingPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlayback */
export type RemovePlaybackInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlayback. */
export type RemovePlaybackPayload = {
  __typename?: 'RemovePlaybackPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  message: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of RemovePlaylistItem */
export type RemovePlaylistItemInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  playlistItemId: Scalars['ID']['input'];
};

/** Autogenerated return type of RemovePlaylistItem. */
export type RemovePlaylistItemPayload = {
  __typename?: 'RemovePlaylistItemPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type Session = {
  __typename?: 'Session';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  ipAddress?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user: User;
  userAgent?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

/** The connection type for Session. */
export type SessionConnection = {
  __typename?: 'SessionConnection';
  /** A list of edges. */
  edges: Array<SessionEdge>;
  /** A list of nodes. */
  nodes: Array<Session>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SessionEdge = {
  __typename?: 'SessionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Session>;
};

export type Singer = {
  __typename?: 'Singer';
  bio?: Maybe<Scalars['String']['output']>;
  birthDate?: Maybe<Scalars['ISO8601Date']['output']>;
  deathDate?: Maybe<Scalars['ISO8601Date']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  photoUrl?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Scalars['Int']['output']>;
  recording: Recording;
  recordingSinger: RecordingSinger;
  recordingSingers: RecordingSingerConnection;
  recordings: RecordingConnection;
  slug?: Maybe<Scalars['String']['output']>;
  soloist: Scalars['Boolean']['output'];
  sortName?: Maybe<Scalars['String']['output']>;
};


export type SingerRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingerArgs = {
  id: Scalars['ID']['input'];
};


export type SingerRecordingSingersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type SingerRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Singer. */
export type SingerConnection = {
  __typename?: 'SingerConnection';
  /** A list of edges. */
  edges: Array<SingerEdge>;
  /** A list of nodes. */
  nodes: Array<Singer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type SingerEdge = {
  __typename?: 'SingerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Singer>;
};

export type TransferAgent = {
  __typename?: 'TransferAgent';
  audioTransfer: AudioTransfer;
  audioTransfers: AudioTransferConnection;
  audioVariant: AudioVariant;
  audioVariants: AudioVariantConnection;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  recording: Recording;
  recordings: RecordingConnection;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};


export type TransferAgentAudioTransferArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentAudioTransfersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TransferAgentAudioVariantArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentAudioVariantsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type TransferAgentRecordingArgs = {
  id: Scalars['ID']['input'];
};


export type TransferAgentRecordingsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of UpdatePlaylist */
export type UpdatePlaylistInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  image?: InputMaybe<Scalars['Upload']['input']>;
  public?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePlaylist. */
export type UpdatePlaylistPayload = {
  __typename?: 'UpdatePlaylistPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  playlist?: Maybe<Playlist>;
  success?: Maybe<Scalars['Boolean']['output']>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  avatar?: InputMaybe<Scalars['Upload']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateUser. */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors?: Maybe<Array<Scalars['String']['output']>>;
  success?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  admin: Scalars['Boolean']['output'];
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  event: Event;
  events: EventConnection;
  firstName?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  like: Like;
  likes: LikeConnection;
  name: Scalars['String']['output'];
  passwordDigest: Scalars['String']['output'];
  playback: Playback;
  playbacks: PlaybackConnection;
  playlist: Playlist;
  playlists: PlaylistConnection;
  provider?: Maybe<Scalars['String']['output']>;
  session: Session;
  sessions: SessionConnection;
  uid?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  username?: Maybe<Scalars['String']['output']>;
  verified: Scalars['Boolean']['output'];
};


export type UserEventArgs = {
  id: Scalars['ID']['input'];
};


export type UserEventsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserLikeArgs = {
  id: Scalars['ID']['input'];
};


export type UserLikesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaybackArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaybacksArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserPlaylistArgs = {
  id: Scalars['ID']['input'];
};


export type UserPlaylistsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type UserSessionArgs = {
  id: Scalars['ID']['input'];
};


export type UserSessionsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** A list of nodes. */
  nodes: Array<User>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type ValidationErrors = {
  __typename?: 'ValidationErrors';
  details: Scalars['String']['output'];
  fullMessages: Array<Scalars['String']['output']>;
};

export type Waveform = {
  __typename?: 'Waveform';
  audioTransfer: AudioTransfer;
  audioTransferId: Scalars['String']['output'];
  bits: Scalars['Int']['output'];
  channels: Scalars['Int']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  data: Array<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  imageUrl?: Maybe<Scalars['String']['output']>;
  length: Scalars['Int']['output'];
  sampleRate: Scalars['Int']['output'];
  samplesPerPixel: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  version: Scalars['Int']['output'];
};

export type AddLikeToRecordingMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type AddLikeToRecordingMutation = { __typename?: 'Mutation', addLikeToRecording?: { __typename?: 'AddLikeToRecordingPayload', success: boolean, errors: Array<string>, like?: { __typename?: 'Like', id: string, likeableType: string, likeableId: string, user: { __typename?: 'User', id: string } } | null } | null };

export type AppleLoginMutationVariables = Exact<{
  userIdentifier: Scalars['String']['input'];
  identityToken: Scalars['String']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
}>;


export type AppleLoginMutation = { __typename?: 'Mutation', appleLogin?: { __typename?: 'AppleLoginPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type CreatePlaybackMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type CreatePlaybackMutation = { __typename?: 'Mutation', createPlayback?: { __typename?: 'CreatePlaybackPayload', playback?: { __typename?: 'Playback', id: string, recording: { __typename?: 'Recording', id: string } } | null } | null };

export type GoogleLoginMutationVariables = Exact<{
  idToken: Scalars['String']['input'];
}>;


export type GoogleLoginMutation = { __typename?: 'Mutation', googleLogin?: { __typename?: 'GoogleLoginPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type LoginMutationVariables = Exact<{
  login: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'LoginUserPayload', token?: string | null, user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type RegisterMutationVariables = Exact<{
  username: Scalars['String']['input'];
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type RegisterMutation = { __typename?: 'Mutation', register?: { __typename?: 'RegisterUserPayload', user?: { __typename?: 'User', id: string, username?: string | null, email: string } | null } | null };

export type RemoveLikeFromRecordingMutationVariables = Exact<{
  recordingId: Scalars['ID']['input'];
}>;


export type RemoveLikeFromRecordingMutation = { __typename?: 'Mutation', removeLikeFromRecording?: { __typename?: 'RemoveLikeFromRecordingPayload', success: boolean, errors: Array<string> } | null };

export type ComposerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type ComposerQuery = { __typename?: 'Query', composer: { __typename?: 'Composer', id?: string | null, name: string, compositions: { __typename?: 'CompositionConnection', edges: Array<{ __typename?: 'CompositionEdge', node?: { __typename?: 'Composition', id?: string | null, title?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } | null }> } } };

export type ComposersQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type ComposersQuery = { __typename?: 'Query', composers: { __typename?: 'ComposerConnection', edges: Array<{ __typename?: 'ComposerEdge', node?: { __typename?: 'Composer', id?: string | null, name: string } | null }> } };

export type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserQuery = { __typename?: 'Query', currentUser: { __typename?: 'User', id: string, email: string, username?: string | null, name: string, firstName?: string | null, lastName?: string | null, verified: boolean, admin: boolean, avatarUrl?: string | null, createdAt: any, updatedAt: any, playbacks: { __typename?: 'PlaybackConnection', edges: Array<{ __typename?: 'PlaybackEdge', node?: { __typename?: 'Playback', id: string, recording: { __typename?: 'Recording', id: string, title: string, year?: number | null, orchestra: { __typename?: 'Orchestra', name?: string | null }, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } } | null }> } } };

export type LikedRecordingsQueryVariables = Exact<{ [key: string]: never; }>;


export type LikedRecordingsQuery = { __typename?: 'Query', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, orchestra: { __typename?: 'Orchestra', name?: string | null }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, album?: { __typename?: 'Album', id?: string | null, albumArtUrl?: string | null } | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', id: string, audioFileUrl?: string | null, duration: number } | null }> } } | null }> } } | null }> } };

export type LyricistQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type LyricistQuery = { __typename?: 'Query', lyricist: { __typename?: 'Lyricist', id?: string | null, name?: string | null, compositions: { __typename?: 'CompositionConnection', edges: Array<{ __typename?: 'CompositionEdge', node?: { __typename?: 'Composition', id?: string | null, title?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } | null }> } } };

export type LyricistsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type LyricistsQuery = { __typename?: 'Query', lyricists: { __typename?: 'LyricistConnection', edges: Array<{ __typename?: 'LyricistEdge', node?: { __typename?: 'Lyricist', id?: string | null, name?: string | null } | null }> } };

export type OrchestraQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type OrchestraQuery = { __typename?: 'Query', orchestra: { __typename?: 'Orchestra', id?: string | null, name?: string | null, photoUrl?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } };

export type OrchestrasQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type OrchestrasQuery = { __typename?: 'Query', orchestras: { __typename?: 'OrchestraConnection', edges: Array<{ __typename?: 'OrchestraEdge', node?: { __typename?: 'Orchestra', id?: string | null, name?: string | null, photoUrl?: string | null, recordingsCount?: number | null } | null }> } };

export type PlaylistsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type PlaylistsQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, title: string, description?: string | null, imageUrl?: string | null } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type RecordingQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type RecordingQuery = { __typename?: 'Query', recording: { __typename?: 'Recording', audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> } } | null }> } } };

export type RecordingsQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  sortBy?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type RecordingsQuery = { __typename?: 'Query', recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, recordedDate?: any | null, year?: number | null, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, genre: { __typename?: 'Genre', name: string }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', id: string, duration: number, audioFileUrl?: string | null } | null }> } } | null }> } } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type SingerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type SingerQuery = { __typename?: 'Query', singer: { __typename?: 'Singer', id?: string | null, name?: string | null, photoUrl?: string | null, recordings: { __typename?: 'RecordingConnection', edges: Array<{ __typename?: 'RecordingEdge', node?: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } | null }> } } };

export type SingersQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
}>;


export type SingersQuery = { __typename?: 'Query', singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', id?: string | null, name?: string | null, photoUrl?: string | null } | null }> } };

export type TandaOfTheWeekQueryVariables = Exact<{
  query?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
}>;


export type TandaOfTheWeekQuery = { __typename?: 'Query', playlists: { __typename?: 'PlaylistConnection', edges: Array<{ __typename?: 'PlaylistEdge', node?: { __typename?: 'Playlist', id: string, title: string, description?: string | null, imageUrl?: string | null, playlistItems: { __typename?: 'PlaylistItemConnection', edges: Array<{ __typename?: 'PlaylistItemEdge', node?: { __typename?: 'PlaylistItem', id: string, playable: { __typename?: 'Recording', id: string, title: string, year?: number | null, genre: { __typename?: 'Genre', name: string }, orchestra: { __typename?: 'Orchestra', name?: string | null }, singers: { __typename?: 'SingerConnection', edges: Array<{ __typename?: 'SingerEdge', node?: { __typename?: 'Singer', name?: string | null } | null }> }, composition?: { __typename?: 'Composition', lyrics: { __typename?: 'LyricConnection', edges: Array<{ __typename?: 'LyricEdge', node?: { __typename?: 'Lyric', locale?: string | null, content?: string | null } | null }> } } | null, audioTransfers: { __typename?: 'AudioTransferConnection', edges: Array<{ __typename?: 'AudioTransferEdge', node?: { __typename?: 'AudioTransfer', id?: string | null, audioVariants: { __typename?: 'AudioVariantConnection', edges: Array<{ __typename?: 'AudioVariantEdge', node?: { __typename?: 'AudioVariant', audioFileUrl?: string | null, duration: number } | null }> }, album?: { __typename?: 'Album', albumArtUrl?: string | null } | null } | null }> } } } | null }> } } | null }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type UserQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UserQuery = { __typename?: 'Query', user: { __typename?: 'User', id: string, name: string, email: string, username?: string | null, firstName?: string | null, lastName?: string | null, admin: boolean } };


export const AddLikeToRecordingDocument = gql`
    mutation AddLikeToRecording($recordingId: ID!) {
  addLikeToRecording(input: {recordingId: $recordingId}) {
    like {
      id
      likeableType
      likeableId
      user {
        id
      }
    }
    success
    errors
  }
}
    `;
export type AddLikeToRecordingMutationFn = Apollo.MutationFunction<AddLikeToRecordingMutation, AddLikeToRecordingMutationVariables>;

/**
 * __useAddLikeToRecordingMutation__
 *
 * To run a mutation, you first call `useAddLikeToRecordingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddLikeToRecordingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addLikeToRecordingMutation, { data, loading, error }] = useAddLikeToRecordingMutation({
 *   variables: {
 *      recordingId: // value for 'recordingId'
 *   },
 * });
 */
export function useAddLikeToRecordingMutation(baseOptions?: Apollo.MutationHookOptions<AddLikeToRecordingMutation, AddLikeToRecordingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddLikeToRecordingMutation, AddLikeToRecordingMutationVariables>(AddLikeToRecordingDocument, options);
      }
export type AddLikeToRecordingMutationHookResult = ReturnType<typeof useAddLikeToRecordingMutation>;
export type AddLikeToRecordingMutationResult = Apollo.MutationResult<AddLikeToRecordingMutation>;
export type AddLikeToRecordingMutationOptions = Apollo.BaseMutationOptions<AddLikeToRecordingMutation, AddLikeToRecordingMutationVariables>;
export const AppleLoginDocument = gql`
    mutation appleLogin($userIdentifier: String!, $identityToken: String!, $email: String, $firstName: String, $lastName: String) {
  appleLogin(
    input: {userIdentifier: $userIdentifier, identityToken: $identityToken, email: $email, firstName: $firstName, lastName: $lastName}
  ) {
    user {
      id
      username
      email
    }
    token
  }
}
    `;
export type AppleLoginMutationFn = Apollo.MutationFunction<AppleLoginMutation, AppleLoginMutationVariables>;

/**
 * __useAppleLoginMutation__
 *
 * To run a mutation, you first call `useAppleLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAppleLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [appleLoginMutation, { data, loading, error }] = useAppleLoginMutation({
 *   variables: {
 *      userIdentifier: // value for 'userIdentifier'
 *      identityToken: // value for 'identityToken'
 *      email: // value for 'email'
 *      firstName: // value for 'firstName'
 *      lastName: // value for 'lastName'
 *   },
 * });
 */
export function useAppleLoginMutation(baseOptions?: Apollo.MutationHookOptions<AppleLoginMutation, AppleLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AppleLoginMutation, AppleLoginMutationVariables>(AppleLoginDocument, options);
      }
export type AppleLoginMutationHookResult = ReturnType<typeof useAppleLoginMutation>;
export type AppleLoginMutationResult = Apollo.MutationResult<AppleLoginMutation>;
export type AppleLoginMutationOptions = Apollo.BaseMutationOptions<AppleLoginMutation, AppleLoginMutationVariables>;
export const CreatePlaybackDocument = gql`
    mutation CreatePlayback($recordingId: ID!) {
  createPlayback(input: {recordingId: $recordingId}) {
    playback {
      id
      recording {
        id
      }
    }
  }
}
    `;
export type CreatePlaybackMutationFn = Apollo.MutationFunction<CreatePlaybackMutation, CreatePlaybackMutationVariables>;

/**
 * __useCreatePlaybackMutation__
 *
 * To run a mutation, you first call `useCreatePlaybackMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePlaybackMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPlaybackMutation, { data, loading, error }] = useCreatePlaybackMutation({
 *   variables: {
 *      recordingId: // value for 'recordingId'
 *   },
 * });
 */
export function useCreatePlaybackMutation(baseOptions?: Apollo.MutationHookOptions<CreatePlaybackMutation, CreatePlaybackMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreatePlaybackMutation, CreatePlaybackMutationVariables>(CreatePlaybackDocument, options);
      }
export type CreatePlaybackMutationHookResult = ReturnType<typeof useCreatePlaybackMutation>;
export type CreatePlaybackMutationResult = Apollo.MutationResult<CreatePlaybackMutation>;
export type CreatePlaybackMutationOptions = Apollo.BaseMutationOptions<CreatePlaybackMutation, CreatePlaybackMutationVariables>;
export const GoogleLoginDocument = gql`
    mutation googleLogin($idToken: String!) {
  googleLogin(input: {idToken: $idToken}) {
    user {
      id
      username
      email
    }
    token
  }
}
    `;
export type GoogleLoginMutationFn = Apollo.MutationFunction<GoogleLoginMutation, GoogleLoginMutationVariables>;

/**
 * __useGoogleLoginMutation__
 *
 * To run a mutation, you first call `useGoogleLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGoogleLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [googleLoginMutation, { data, loading, error }] = useGoogleLoginMutation({
 *   variables: {
 *      idToken: // value for 'idToken'
 *   },
 * });
 */
export function useGoogleLoginMutation(baseOptions?: Apollo.MutationHookOptions<GoogleLoginMutation, GoogleLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<GoogleLoginMutation, GoogleLoginMutationVariables>(GoogleLoginDocument, options);
      }
export type GoogleLoginMutationHookResult = ReturnType<typeof useGoogleLoginMutation>;
export type GoogleLoginMutationResult = Apollo.MutationResult<GoogleLoginMutation>;
export type GoogleLoginMutationOptions = Apollo.BaseMutationOptions<GoogleLoginMutation, GoogleLoginMutationVariables>;
export const LoginDocument = gql`
    mutation login($login: String!, $password: String!) {
  login(input: {login: $login, password: $password}) {
    user {
      id
      username
      email
    }
    token
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      login: // value for 'login'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const RegisterDocument = gql`
    mutation Register($username: String!, $email: String!, $password: String!) {
  register(input: {username: $username, email: $email, password: $password}) {
    user {
      id
      username
      email
    }
  }
}
    `;
export type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [registerMutation, { data, loading, error }] = useRegisterMutation({
 *   variables: {
 *      username: // value for 'username'
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);
      }
export type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;
export type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;
export type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;
export const RemoveLikeFromRecordingDocument = gql`
    mutation RemoveLikeFromRecording($recordingId: ID!) {
  removeLikeFromRecording(input: {recordingId: $recordingId}) {
    success
    errors
  }
}
    `;
export type RemoveLikeFromRecordingMutationFn = Apollo.MutationFunction<RemoveLikeFromRecordingMutation, RemoveLikeFromRecordingMutationVariables>;

/**
 * __useRemoveLikeFromRecordingMutation__
 *
 * To run a mutation, you first call `useRemoveLikeFromRecordingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveLikeFromRecordingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeLikeFromRecordingMutation, { data, loading, error }] = useRemoveLikeFromRecordingMutation({
 *   variables: {
 *      recordingId: // value for 'recordingId'
 *   },
 * });
 */
export function useRemoveLikeFromRecordingMutation(baseOptions?: Apollo.MutationHookOptions<RemoveLikeFromRecordingMutation, RemoveLikeFromRecordingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RemoveLikeFromRecordingMutation, RemoveLikeFromRecordingMutationVariables>(RemoveLikeFromRecordingDocument, options);
      }
export type RemoveLikeFromRecordingMutationHookResult = ReturnType<typeof useRemoveLikeFromRecordingMutation>;
export type RemoveLikeFromRecordingMutationResult = Apollo.MutationResult<RemoveLikeFromRecordingMutation>;
export type RemoveLikeFromRecordingMutationOptions = Apollo.BaseMutationOptions<RemoveLikeFromRecordingMutation, RemoveLikeFromRecordingMutationVariables>;
export const ComposerDocument = gql`
    query Composer($id: ID!) {
  composer(id: $id) {
    id
    name
    compositions {
      edges {
        node {
          id
          title
          recordings {
            edges {
              node {
                id
                title
                year
                genre {
                  name
                }
                orchestra {
                  name
                }
                singers {
                  edges {
                    node {
                      name
                    }
                  }
                }
                audioTransfers {
                  edges {
                    node {
                      audioVariants {
                        edges {
                          node {
                            audioFileUrl
                            duration
                          }
                        }
                      }
                      album {
                        albumArtUrl
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useComposerQuery__
 *
 * To run a query within a React component, call `useComposerQuery` and pass it any options that fit your needs.
 * When your component renders, `useComposerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useComposerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useComposerQuery(baseOptions: Apollo.QueryHookOptions<ComposerQuery, ComposerQueryVariables> & ({ variables: ComposerQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ComposerQuery, ComposerQueryVariables>(ComposerDocument, options);
      }
export function useComposerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ComposerQuery, ComposerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ComposerQuery, ComposerQueryVariables>(ComposerDocument, options);
        }
export function useComposerSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ComposerQuery, ComposerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ComposerQuery, ComposerQueryVariables>(ComposerDocument, options);
        }
export type ComposerQueryHookResult = ReturnType<typeof useComposerQuery>;
export type ComposerLazyQueryHookResult = ReturnType<typeof useComposerLazyQuery>;
export type ComposerSuspenseQueryHookResult = ReturnType<typeof useComposerSuspenseQuery>;
export type ComposerQueryResult = Apollo.QueryResult<ComposerQuery, ComposerQueryVariables>;
export const ComposersDocument = gql`
    query Composers($query: String) {
  composers(query: $query) {
    edges {
      node {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useComposersQuery__
 *
 * To run a query within a React component, call `useComposersQuery` and pass it any options that fit your needs.
 * When your component renders, `useComposersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useComposersQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useComposersQuery(baseOptions?: Apollo.QueryHookOptions<ComposersQuery, ComposersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ComposersQuery, ComposersQueryVariables>(ComposersDocument, options);
      }
export function useComposersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ComposersQuery, ComposersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ComposersQuery, ComposersQueryVariables>(ComposersDocument, options);
        }
export function useComposersSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<ComposersQuery, ComposersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ComposersQuery, ComposersQueryVariables>(ComposersDocument, options);
        }
export type ComposersQueryHookResult = ReturnType<typeof useComposersQuery>;
export type ComposersLazyQueryHookResult = ReturnType<typeof useComposersLazyQuery>;
export type ComposersSuspenseQueryHookResult = ReturnType<typeof useComposersSuspenseQuery>;
export type ComposersQueryResult = Apollo.QueryResult<ComposersQuery, ComposersQueryVariables>;
export const CurrentUserDocument = gql`
    query CurrentUser {
  currentUser {
    id
    email
    username
    name
    firstName
    lastName
    verified
    admin
    avatarUrl
    createdAt
    updatedAt
    playbacks {
      edges {
        node {
          id
          recording {
            id
            title
            orchestra {
              name
            }
            genre {
              name
            }
            year
            singers {
              edges {
                node {
                  name
                }
              }
            }
            composition {
              lyrics {
                edges {
                  node {
                    locale
                    content
                  }
                }
              }
            }
            audioTransfers {
              edges {
                node {
                  id
                  audioVariants {
                    edges {
                      node {
                        audioFileUrl
                        duration
                      }
                    }
                  }
                  album {
                    albumArtUrl
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(baseOptions?: Apollo.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
      }
export function useCurrentUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export function useCurrentUserSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, options);
        }
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;
export type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;
export type CurrentUserSuspenseQueryHookResult = ReturnType<typeof useCurrentUserSuspenseQuery>;
export type CurrentUserQueryResult = Apollo.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;
export const LikedRecordingsDocument = gql`
    query LikedRecordings {
  recordings {
    edges {
      node {
        id
        title
        year
        genre {
          name
        }
        singers {
          edges {
            node {
              name
            }
          }
        }
        orchestra {
          name
        }
        composition {
          lyrics {
            edges {
              node {
                locale
                content
              }
            }
          }
        }
        audioTransfers {
          edges {
            node {
              id
              album {
                id
                albumArtUrl
              }
              audioVariants {
                edges {
                  node {
                    id
                    audioFileUrl
                    duration
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useLikedRecordingsQuery__
 *
 * To run a query within a React component, call `useLikedRecordingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLikedRecordingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLikedRecordingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useLikedRecordingsQuery(baseOptions?: Apollo.QueryHookOptions<LikedRecordingsQuery, LikedRecordingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LikedRecordingsQuery, LikedRecordingsQueryVariables>(LikedRecordingsDocument, options);
      }
export function useLikedRecordingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LikedRecordingsQuery, LikedRecordingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LikedRecordingsQuery, LikedRecordingsQueryVariables>(LikedRecordingsDocument, options);
        }
export function useLikedRecordingsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<LikedRecordingsQuery, LikedRecordingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LikedRecordingsQuery, LikedRecordingsQueryVariables>(LikedRecordingsDocument, options);
        }
export type LikedRecordingsQueryHookResult = ReturnType<typeof useLikedRecordingsQuery>;
export type LikedRecordingsLazyQueryHookResult = ReturnType<typeof useLikedRecordingsLazyQuery>;
export type LikedRecordingsSuspenseQueryHookResult = ReturnType<typeof useLikedRecordingsSuspenseQuery>;
export type LikedRecordingsQueryResult = Apollo.QueryResult<LikedRecordingsQuery, LikedRecordingsQueryVariables>;
export const LyricistDocument = gql`
    query Lyricist($id: ID!) {
  lyricist(id: $id) {
    id
    name
    compositions {
      edges {
        node {
          id
          title
          recordings {
            edges {
              node {
                id
                title
                year
                genre {
                  name
                }
                singers {
                  edges {
                    node {
                      name
                    }
                  }
                }
                audioTransfers {
                  edges {
                    node {
                      audioVariants {
                        edges {
                          node {
                            audioFileUrl
                            duration
                          }
                        }
                      }
                      album {
                        albumArtUrl
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useLyricistQuery__
 *
 * To run a query within a React component, call `useLyricistQuery` and pass it any options that fit your needs.
 * When your component renders, `useLyricistQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLyricistQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLyricistQuery(baseOptions: Apollo.QueryHookOptions<LyricistQuery, LyricistQueryVariables> & ({ variables: LyricistQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LyricistQuery, LyricistQueryVariables>(LyricistDocument, options);
      }
export function useLyricistLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LyricistQuery, LyricistQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LyricistQuery, LyricistQueryVariables>(LyricistDocument, options);
        }
export function useLyricistSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<LyricistQuery, LyricistQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LyricistQuery, LyricistQueryVariables>(LyricistDocument, options);
        }
export type LyricistQueryHookResult = ReturnType<typeof useLyricistQuery>;
export type LyricistLazyQueryHookResult = ReturnType<typeof useLyricistLazyQuery>;
export type LyricistSuspenseQueryHookResult = ReturnType<typeof useLyricistSuspenseQuery>;
export type LyricistQueryResult = Apollo.QueryResult<LyricistQuery, LyricistQueryVariables>;
export const LyricistsDocument = gql`
    query Lyricists($query: String) {
  lyricists(query: $query) {
    edges {
      node {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useLyricistsQuery__
 *
 * To run a query within a React component, call `useLyricistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLyricistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLyricistsQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useLyricistsQuery(baseOptions?: Apollo.QueryHookOptions<LyricistsQuery, LyricistsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LyricistsQuery, LyricistsQueryVariables>(LyricistsDocument, options);
      }
export function useLyricistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LyricistsQuery, LyricistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LyricistsQuery, LyricistsQueryVariables>(LyricistsDocument, options);
        }
export function useLyricistsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<LyricistsQuery, LyricistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LyricistsQuery, LyricistsQueryVariables>(LyricistsDocument, options);
        }
export type LyricistsQueryHookResult = ReturnType<typeof useLyricistsQuery>;
export type LyricistsLazyQueryHookResult = ReturnType<typeof useLyricistsLazyQuery>;
export type LyricistsSuspenseQueryHookResult = ReturnType<typeof useLyricistsSuspenseQuery>;
export type LyricistsQueryResult = Apollo.QueryResult<LyricistsQuery, LyricistsQueryVariables>;
export const OrchestraDocument = gql`
    query Orchestra($id: ID!) {
  orchestra(id: $id) {
    id
    name
    photoUrl
    recordings {
      edges {
        node {
          id
          title
          year
          genre {
            name
          }
          orchestra {
            name
          }
          singers {
            edges {
              node {
                name
              }
            }
          }
          audioTransfers {
            edges {
              node {
                audioVariants {
                  edges {
                    node {
                      audioFileUrl
                      duration
                    }
                  }
                }
                album {
                  albumArtUrl
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useOrchestraQuery__
 *
 * To run a query within a React component, call `useOrchestraQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrchestraQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrchestraQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useOrchestraQuery(baseOptions: Apollo.QueryHookOptions<OrchestraQuery, OrchestraQueryVariables> & ({ variables: OrchestraQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrchestraQuery, OrchestraQueryVariables>(OrchestraDocument, options);
      }
export function useOrchestraLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrchestraQuery, OrchestraQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrchestraQuery, OrchestraQueryVariables>(OrchestraDocument, options);
        }
export function useOrchestraSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<OrchestraQuery, OrchestraQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<OrchestraQuery, OrchestraQueryVariables>(OrchestraDocument, options);
        }
export type OrchestraQueryHookResult = ReturnType<typeof useOrchestraQuery>;
export type OrchestraLazyQueryHookResult = ReturnType<typeof useOrchestraLazyQuery>;
export type OrchestraSuspenseQueryHookResult = ReturnType<typeof useOrchestraSuspenseQuery>;
export type OrchestraQueryResult = Apollo.QueryResult<OrchestraQuery, OrchestraQueryVariables>;
export const OrchestrasDocument = gql`
    query Orchestras($query: String) {
  orchestras(query: $query) {
    edges {
      node {
        id
        name
        photoUrl
        recordingsCount
      }
    }
  }
}
    `;

/**
 * __useOrchestrasQuery__
 *
 * To run a query within a React component, call `useOrchestrasQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrchestrasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrchestrasQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useOrchestrasQuery(baseOptions?: Apollo.QueryHookOptions<OrchestrasQuery, OrchestrasQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrchestrasQuery, OrchestrasQueryVariables>(OrchestrasDocument, options);
      }
export function useOrchestrasLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrchestrasQuery, OrchestrasQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrchestrasQuery, OrchestrasQueryVariables>(OrchestrasDocument, options);
        }
export function useOrchestrasSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<OrchestrasQuery, OrchestrasQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<OrchestrasQuery, OrchestrasQueryVariables>(OrchestrasDocument, options);
        }
export type OrchestrasQueryHookResult = ReturnType<typeof useOrchestrasQuery>;
export type OrchestrasLazyQueryHookResult = ReturnType<typeof useOrchestrasLazyQuery>;
export type OrchestrasSuspenseQueryHookResult = ReturnType<typeof useOrchestrasSuspenseQuery>;
export type OrchestrasQueryResult = Apollo.QueryResult<OrchestrasQuery, OrchestrasQueryVariables>;
export const PlaylistsDocument = gql`
    query Playlists($query: String, $first: Int) {
  playlists(query: $query, first: $first) {
    edges {
      node {
        id
        title
        description
        imageUrl
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __usePlaylistsQuery__
 *
 * To run a query within a React component, call `usePlaylistsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePlaylistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePlaylistsQuery({
 *   variables: {
 *      query: // value for 'query'
 *      first: // value for 'first'
 *   },
 * });
 */
export function usePlaylistsQuery(baseOptions?: Apollo.QueryHookOptions<PlaylistsQuery, PlaylistsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PlaylistsQuery, PlaylistsQueryVariables>(PlaylistsDocument, options);
      }
export function usePlaylistsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PlaylistsQuery, PlaylistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PlaylistsQuery, PlaylistsQueryVariables>(PlaylistsDocument, options);
        }
export function usePlaylistsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<PlaylistsQuery, PlaylistsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<PlaylistsQuery, PlaylistsQueryVariables>(PlaylistsDocument, options);
        }
export type PlaylistsQueryHookResult = ReturnType<typeof usePlaylistsQuery>;
export type PlaylistsLazyQueryHookResult = ReturnType<typeof usePlaylistsLazyQuery>;
export type PlaylistsSuspenseQueryHookResult = ReturnType<typeof usePlaylistsSuspenseQuery>;
export type PlaylistsQueryResult = Apollo.QueryResult<PlaylistsQuery, PlaylistsQueryVariables>;
export const RecordingDocument = gql`
    query Recording($id: ID!) {
  recording(id: $id) {
    audioTransfers {
      edges {
        node {
          audioVariants {
            edges {
              node {
                audioFileUrl
                duration
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useRecordingQuery__
 *
 * To run a query within a React component, call `useRecordingQuery` and pass it any options that fit your needs.
 * When your component renders, `useRecordingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRecordingQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRecordingQuery(baseOptions: Apollo.QueryHookOptions<RecordingQuery, RecordingQueryVariables> & ({ variables: RecordingQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RecordingQuery, RecordingQueryVariables>(RecordingDocument, options);
      }
export function useRecordingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RecordingQuery, RecordingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RecordingQuery, RecordingQueryVariables>(RecordingDocument, options);
        }
export function useRecordingSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<RecordingQuery, RecordingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RecordingQuery, RecordingQueryVariables>(RecordingDocument, options);
        }
export type RecordingQueryHookResult = ReturnType<typeof useRecordingQuery>;
export type RecordingLazyQueryHookResult = ReturnType<typeof useRecordingLazyQuery>;
export type RecordingSuspenseQueryHookResult = ReturnType<typeof useRecordingSuspenseQuery>;
export type RecordingQueryResult = Apollo.QueryResult<RecordingQuery, RecordingQueryVariables>;
export const RecordingsDocument = gql`
    query Recordings($query: String, $sortBy: String, $order: String, $first: Int, $after: String) {
  recordings(
    query: $query
    sortBy: $sortBy
    order: $order
    first: $first
    after: $after
  ) {
    edges {
      node {
        id
        title
        recordedDate
        orchestra {
          name
        }
        singers {
          edges {
            node {
              name
            }
          }
        }
        genre {
          name
        }
        composition {
          lyrics {
            edges {
              node {
                locale
                content
              }
            }
          }
        }
        year
        audioTransfers {
          edges {
            node {
              id
              album {
                albumArtUrl
              }
              audioVariants {
                edges {
                  node {
                    id
                    duration
                    audioFileUrl
                  }
                }
              }
            }
          }
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useRecordingsQuery__
 *
 * To run a query within a React component, call `useRecordingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useRecordingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRecordingsQuery({
 *   variables: {
 *      query: // value for 'query'
 *      sortBy: // value for 'sortBy'
 *      order: // value for 'order'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useRecordingsQuery(baseOptions?: Apollo.QueryHookOptions<RecordingsQuery, RecordingsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RecordingsQuery, RecordingsQueryVariables>(RecordingsDocument, options);
      }
export function useRecordingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RecordingsQuery, RecordingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RecordingsQuery, RecordingsQueryVariables>(RecordingsDocument, options);
        }
export function useRecordingsSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<RecordingsQuery, RecordingsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RecordingsQuery, RecordingsQueryVariables>(RecordingsDocument, options);
        }
export type RecordingsQueryHookResult = ReturnType<typeof useRecordingsQuery>;
export type RecordingsLazyQueryHookResult = ReturnType<typeof useRecordingsLazyQuery>;
export type RecordingsSuspenseQueryHookResult = ReturnType<typeof useRecordingsSuspenseQuery>;
export type RecordingsQueryResult = Apollo.QueryResult<RecordingsQuery, RecordingsQueryVariables>;
export const SingerDocument = gql`
    query Singer($id: ID!) {
  singer(id: $id) {
    id
    name
    photoUrl
    recordings {
      edges {
        node {
          id
          title
          year
          genre {
            name
          }
          orchestra {
            name
          }
          singers {
            edges {
              node {
                name
              }
            }
          }
          audioTransfers {
            edges {
              node {
                audioVariants {
                  edges {
                    node {
                      audioFileUrl
                      duration
                    }
                  }
                }
                album {
                  albumArtUrl
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useSingerQuery__
 *
 * To run a query within a React component, call `useSingerQuery` and pass it any options that fit your needs.
 * When your component renders, `useSingerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSingerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSingerQuery(baseOptions: Apollo.QueryHookOptions<SingerQuery, SingerQueryVariables> & ({ variables: SingerQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SingerQuery, SingerQueryVariables>(SingerDocument, options);
      }
export function useSingerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SingerQuery, SingerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SingerQuery, SingerQueryVariables>(SingerDocument, options);
        }
export function useSingerSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<SingerQuery, SingerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SingerQuery, SingerQueryVariables>(SingerDocument, options);
        }
export type SingerQueryHookResult = ReturnType<typeof useSingerQuery>;
export type SingerLazyQueryHookResult = ReturnType<typeof useSingerLazyQuery>;
export type SingerSuspenseQueryHookResult = ReturnType<typeof useSingerSuspenseQuery>;
export type SingerQueryResult = Apollo.QueryResult<SingerQuery, SingerQueryVariables>;
export const SingersDocument = gql`
    query Singers($query: String) {
  singers(query: $query) {
    edges {
      node {
        id
        name
        photoUrl
      }
    }
  }
}
    `;

/**
 * __useSingersQuery__
 *
 * To run a query within a React component, call `useSingersQuery` and pass it any options that fit your needs.
 * When your component renders, `useSingersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSingersQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useSingersQuery(baseOptions?: Apollo.QueryHookOptions<SingersQuery, SingersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SingersQuery, SingersQueryVariables>(SingersDocument, options);
      }
export function useSingersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SingersQuery, SingersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SingersQuery, SingersQueryVariables>(SingersDocument, options);
        }
export function useSingersSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<SingersQuery, SingersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SingersQuery, SingersQueryVariables>(SingersDocument, options);
        }
export type SingersQueryHookResult = ReturnType<typeof useSingersQuery>;
export type SingersLazyQueryHookResult = ReturnType<typeof useSingersLazyQuery>;
export type SingersSuspenseQueryHookResult = ReturnType<typeof useSingersSuspenseQuery>;
export type SingersQueryResult = Apollo.QueryResult<SingersQuery, SingersQueryVariables>;
export const TandaOfTheWeekDocument = gql`
    query TandaOfTheWeek($query: String, $first: Int) {
  playlists(query: $query, first: $first) {
    edges {
      node {
        id
        title
        description
        imageUrl
        playlistItems {
          edges {
            node {
              id
              playable {
                ... on Recording {
                  id
                  title
                  year
                  genre {
                    name
                  }
                  orchestra {
                    name
                  }
                  singers {
                    edges {
                      node {
                        name
                      }
                    }
                  }
                  composition {
                    lyrics {
                      edges {
                        node {
                          locale
                          content
                        }
                      }
                    }
                  }
                  audioTransfers {
                    edges {
                      node {
                        id
                        audioVariants {
                          edges {
                            node {
                              audioFileUrl
                              duration
                            }
                          }
                        }
                        album {
                          albumArtUrl
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useTandaOfTheWeekQuery__
 *
 * To run a query within a React component, call `useTandaOfTheWeekQuery` and pass it any options that fit your needs.
 * When your component renders, `useTandaOfTheWeekQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTandaOfTheWeekQuery({
 *   variables: {
 *      query: // value for 'query'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useTandaOfTheWeekQuery(baseOptions?: Apollo.QueryHookOptions<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>(TandaOfTheWeekDocument, options);
      }
export function useTandaOfTheWeekLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>(TandaOfTheWeekDocument, options);
        }
export function useTandaOfTheWeekSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>(TandaOfTheWeekDocument, options);
        }
export type TandaOfTheWeekQueryHookResult = ReturnType<typeof useTandaOfTheWeekQuery>;
export type TandaOfTheWeekLazyQueryHookResult = ReturnType<typeof useTandaOfTheWeekLazyQuery>;
export type TandaOfTheWeekSuspenseQueryHookResult = ReturnType<typeof useTandaOfTheWeekSuspenseQuery>;
export type TandaOfTheWeekQueryResult = Apollo.QueryResult<TandaOfTheWeekQuery, TandaOfTheWeekQueryVariables>;
export const UserDocument = gql`
    query User($id: ID!) {
  user(id: $id) {
    id
    name
    email
    username
    firstName
    lastName
    admin
  }
}
    `;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables> & ({ variables: UserQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);
      }
export function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);
        }
export function useUserSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<UserQuery, UserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<UserQuery, UserQueryVariables>(UserDocument, options);
        }
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserSuspenseQueryHookResult = ReturnType<typeof useUserSuspenseQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;
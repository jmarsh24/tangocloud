/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n\tmutation appleLogin(\n\t\t$userIdentifier: String!\n\t\t$identityToken: String!\n\t\t$email: String\n\t\t$firstName: String\n\t\t$lastName: String\n\t) {\n\t\tappleLogin(\n\t\t\tinput: {\n\t\t\t\tuserIdentifier: $userIdentifier\n\t\t\t\tidentityToken: $identityToken\n\t\t\t\temail: $email\n\t\t\t\tfirstName: $firstName\n\t\t\t\tlastName: $lastName\n\t\t\t}\n\t\t) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n": types.AppleLoginDocument,
    "\n\tmutation CreatePlayback($recordingId: ID!) {\n\t\tcreatePlayback(input: { recordingId: $recordingId }) {\n\t\t\tplayback {\n\t\t\t\tid\n\t\t\t\trecording {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t\tuser {\n\t\t\t\t\tid\n\t\t\t\t\tusername\n\t\t\t\t}\n\t\t\t}\n\t\t\terrors\n\t\t}\n\t}\n": types.CreatePlaybackDocument,
    "\n\tmutation googleLogin($idToken: String!) {\n\t\tgoogleLogin(input: { idToken: $idToken }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n": types.GoogleLoginDocument,
    "\n\tmutation login($login: String!, $password: String!) {\n\t\tlogin(input: { login: $login, password: $password }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n": types.LoginDocument,
    "\n\tmutation register($username: String, $email: String!, $password: String!) {\n\t\tregister(input: { username: $username, email: $email, password: $password }) {\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\tusername\n\t\t\t\temail\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on ValidationError {\n\t\t\t\terrors {\n\t\t\t\t\tfullMessages\n\t\t\t\t\tattributeErrors {\n\t\t\t\t\t\tattribute\n\t\t\t\t\t\terrors\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.RegisterDocument,
    "\n  query currentUser {\n    currentUser {\n      id\n      email\n      username\n      userPreference {\n        firstName\n        lastName\n        avatar {\n          blob {\n            url\n          }\n        }\n      }\n    }\n  }\n": types.CurrentUserDocument,
    "\n\nquery likedRecordings {\n  currentUser {\n    likedRecordings {\n      edges {\n        node {\n          id\n          title\n          genre {\n            name\n          }\n          digitalRemasters {\n            edges {\n              node {\n                duration\n                album {\n                  albumArt {\n                    blob {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          recordingSingers {\n            edges {\n              node {\n                person {\n                  name\n                }\n                soloist\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.LikedRecordingsDocument,
    "\n\tquery Orchestras($query: String) {\n\t\torchestras(query: $query) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.OrchestrasDocument,
    "\n\tquery Playlists($query: String, $first: Int) {\n\t\tplaylists(query: $query, first: $first) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t\tdescription\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n": types.PlaylistsDocument,
    "\n\tquery Recordings($query: String) {\n\t\trecordings {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\trecordedDate\n\t\t\t\t\torchestra {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tsingers {\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tgenre {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tcomposition {\n\t\t\t\t\t\tlyrics {\n\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\t\tlanguage {\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n": types.RecordingsDocument,
    "\n  query searchRecordings($query: String, $filters: RecordingFilterInput, $order_by: RecordingOrderByInput) {\n    searchRecordings(query: $query, filters: $filters, orderBy: $order_by) {\n      recordings {\n        edges {\n          node {\n            id\n            title\n            year\n            genre {\n              name\n            }\n            digitalRemasters {\n              edges {\n                node {\n                  duration\n                  album {\n                    albumArt {\n                      blob {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            orchestra {\n              name\n            }\n            recordingSingers {\n              edges {\n                node {\n                  person {\n                    name\n                  }\n                  soloist\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.SearchRecordingsDocument,
    "\n  query TandaOfTheWeek($query: String, $first: Int) {\n    playlists(query: $query, first: $first) {\n      edges {\n        node {\n          id\n          description\n          image {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n          playlistItems {\n            edges {\n              node {\n                id\n                item {\n                  ... on Recording {\n                    id\n                    genre {\n                      name\n                    }\n                    orchestra {\n                      name\n                    }\n                    singers {\n                      edges {\n                        node {\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.TandaOfTheWeekDocument,
    "\n\tquery userProfile {\n\t\tcurrentUser {\n\t\t\tid\n\t\t\tusername\n\t\t\tuserPreference {\n\t\t\t\tavatar {\n\t\t\t\t\tblob {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tplaybacks {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\trecording {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcomposition {\n\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgenre {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tyear\n\t\t\t\t\t\t\torchestra {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdigitalRemasters {\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tduration\n\t\t\t\t\t\t\t\t\t\talbum {\n\t\t\t\t\t\t\t\t\t\t\talbumArt {\n\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\taudioVariants {\n\t\t\t\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\t\t\t\taudioFile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.UserProfileDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation appleLogin(\n\t\t$userIdentifier: String!\n\t\t$identityToken: String!\n\t\t$email: String\n\t\t$firstName: String\n\t\t$lastName: String\n\t) {\n\t\tappleLogin(\n\t\t\tinput: {\n\t\t\t\tuserIdentifier: $userIdentifier\n\t\t\t\tidentityToken: $identityToken\n\t\t\t\temail: $email\n\t\t\t\tfirstName: $firstName\n\t\t\t\tlastName: $lastName\n\t\t\t}\n\t\t) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation appleLogin(\n\t\t$userIdentifier: String!\n\t\t$identityToken: String!\n\t\t$email: String\n\t\t$firstName: String\n\t\t$lastName: String\n\t) {\n\t\tappleLogin(\n\t\t\tinput: {\n\t\t\t\tuserIdentifier: $userIdentifier\n\t\t\t\tidentityToken: $identityToken\n\t\t\t\temail: $email\n\t\t\t\tfirstName: $firstName\n\t\t\t\tlastName: $lastName\n\t\t\t}\n\t\t) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation CreatePlayback($recordingId: ID!) {\n\t\tcreatePlayback(input: { recordingId: $recordingId }) {\n\t\t\tplayback {\n\t\t\t\tid\n\t\t\t\trecording {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t\tuser {\n\t\t\t\t\tid\n\t\t\t\t\tusername\n\t\t\t\t}\n\t\t\t}\n\t\t\terrors\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation CreatePlayback($recordingId: ID!) {\n\t\tcreatePlayback(input: { recordingId: $recordingId }) {\n\t\t\tplayback {\n\t\t\t\tid\n\t\t\t\trecording {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t\tuser {\n\t\t\t\t\tid\n\t\t\t\t\tusername\n\t\t\t\t}\n\t\t\t}\n\t\t\terrors\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation googleLogin($idToken: String!) {\n\t\tgoogleLogin(input: { idToken: $idToken }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation googleLogin($idToken: String!) {\n\t\tgoogleLogin(input: { idToken: $idToken }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation login($login: String!, $password: String!) {\n\t\tlogin(input: { login: $login, password: $password }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation login($login: String!, $password: String!) {\n\t\tlogin(input: { login: $login, password: $password }) {\n\t\t\t__typename\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\temail\n\t\t\t\tusername\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on FailedLogin {\n\t\t\t\terror\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation register($username: String, $email: String!, $password: String!) {\n\t\tregister(input: { username: $username, email: $email, password: $password }) {\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\tusername\n\t\t\t\temail\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on ValidationError {\n\t\t\t\terrors {\n\t\t\t\t\tfullMessages\n\t\t\t\t\tattributeErrors {\n\t\t\t\t\t\tattribute\n\t\t\t\t\t\terrors\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tmutation register($username: String, $email: String!, $password: String!) {\n\t\tregister(input: { username: $username, email: $email, password: $password }) {\n\t\t\t... on AuthenticatedUser {\n\t\t\t\tid\n\t\t\t\tusername\n\t\t\t\temail\n\t\t\t\tsession {\n\t\t\t\t\taccess\n\t\t\t\t\taccessExpiresAt\n\t\t\t\t\trefresh\n\t\t\t\t\trefreshExpiresAt\n\t\t\t\t}\n\t\t\t}\n\t\t\t... on ValidationError {\n\t\t\t\terrors {\n\t\t\t\t\tfullMessages\n\t\t\t\t\tattributeErrors {\n\t\t\t\t\t\tattribute\n\t\t\t\t\t\terrors\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query currentUser {\n    currentUser {\n      id\n      email\n      username\n      userPreference {\n        firstName\n        lastName\n        avatar {\n          blob {\n            url\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query currentUser {\n    currentUser {\n      id\n      email\n      username\n      userPreference {\n        firstName\n        lastName\n        avatar {\n          blob {\n            url\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\nquery likedRecordings {\n  currentUser {\n    likedRecordings {\n      edges {\n        node {\n          id\n          title\n          genre {\n            name\n          }\n          digitalRemasters {\n            edges {\n              node {\n                duration\n                album {\n                  albumArt {\n                    blob {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          recordingSingers {\n            edges {\n              node {\n                person {\n                  name\n                }\n                soloist\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): (typeof documents)["\n\nquery likedRecordings {\n  currentUser {\n    likedRecordings {\n      edges {\n        node {\n          id\n          title\n          genre {\n            name\n          }\n          digitalRemasters {\n            edges {\n              node {\n                duration\n                album {\n                  albumArt {\n                    blob {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          recordingSingers {\n            edges {\n              node {\n                person {\n                  name\n                }\n                soloist\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery Orchestras($query: String) {\n\t\torchestras(query: $query) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery Orchestras($query: String) {\n\t\torchestras(query: $query) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery Playlists($query: String, $first: Int) {\n\t\tplaylists(query: $query, first: $first) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t\tdescription\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery Playlists($query: String, $first: Int) {\n\t\tplaylists(query: $query, first: $first) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t\tdescription\n\t\t\t\t\timage {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery Recordings($query: String) {\n\t\trecordings {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\trecordedDate\n\t\t\t\t\torchestra {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tsingers {\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tgenre {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tcomposition {\n\t\t\t\t\t\tlyrics {\n\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\t\tlanguage {\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery Recordings($query: String) {\n\t\trecordings {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\trecordedDate\n\t\t\t\t\torchestra {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tsingers {\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tgenre {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tcomposition {\n\t\t\t\t\t\tlyrics {\n\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\ttext\n\t\t\t\t\t\t\t\t\tlanguage {\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\tstartCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query searchRecordings($query: String, $filters: RecordingFilterInput, $order_by: RecordingOrderByInput) {\n    searchRecordings(query: $query, filters: $filters, orderBy: $order_by) {\n      recordings {\n        edges {\n          node {\n            id\n            title\n            year\n            genre {\n              name\n            }\n            digitalRemasters {\n              edges {\n                node {\n                  duration\n                  album {\n                    albumArt {\n                      blob {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            orchestra {\n              name\n            }\n            recordingSingers {\n              edges {\n                node {\n                  person {\n                    name\n                  }\n                  soloist\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query searchRecordings($query: String, $filters: RecordingFilterInput, $order_by: RecordingOrderByInput) {\n    searchRecordings(query: $query, filters: $filters, orderBy: $order_by) {\n      recordings {\n        edges {\n          node {\n            id\n            title\n            year\n            genre {\n              name\n            }\n            digitalRemasters {\n              edges {\n                node {\n                  duration\n                  album {\n                    albumArt {\n                      blob {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            orchestra {\n              name\n            }\n            recordingSingers {\n              edges {\n                node {\n                  person {\n                    name\n                  }\n                  soloist\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TandaOfTheWeek($query: String, $first: Int) {\n    playlists(query: $query, first: $first) {\n      edges {\n        node {\n          id\n          description\n          image {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n          playlistItems {\n            edges {\n              node {\n                id\n                item {\n                  ... on Recording {\n                    id\n                    genre {\n                      name\n                    }\n                    orchestra {\n                      name\n                    }\n                    singers {\n                      edges {\n                        node {\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query TandaOfTheWeek($query: String, $first: Int) {\n    playlists(query: $query, first: $first) {\n      edges {\n        node {\n          id\n          description\n          image {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n          playlistItems {\n            edges {\n              node {\n                id\n                item {\n                  ... on Recording {\n                    id\n                    genre {\n                      name\n                    }\n                    orchestra {\n                      name\n                    }\n                    singers {\n                      edges {\n                        node {\n                          name\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        startCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tquery userProfile {\n\t\tcurrentUser {\n\t\t\tid\n\t\t\tusername\n\t\t\tuserPreference {\n\t\t\t\tavatar {\n\t\t\t\t\tblob {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tplaybacks {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\trecording {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcomposition {\n\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgenre {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tyear\n\t\t\t\t\t\t\torchestra {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdigitalRemasters {\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tduration\n\t\t\t\t\t\t\t\t\t\talbum {\n\t\t\t\t\t\t\t\t\t\t\talbumArt {\n\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\taudioVariants {\n\t\t\t\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\t\t\t\taudioFile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery userProfile {\n\t\tcurrentUser {\n\t\t\tid\n\t\t\tusername\n\t\t\tuserPreference {\n\t\t\t\tavatar {\n\t\t\t\t\tblob {\n\t\t\t\t\t\turl\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tplaybacks {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\trecording {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcomposition {\n\t\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgenre {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tyear\n\t\t\t\t\t\t\torchestra {\n\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdigitalRemasters {\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tduration\n\t\t\t\t\t\t\t\t\t\talbum {\n\t\t\t\t\t\t\t\t\t\t\talbumArt {\n\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\taudioVariants {\n\t\t\t\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\t\t\t\taudioFile {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tblob {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
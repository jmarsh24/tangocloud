type Audio {
  audioTransferId: Uuid!
  bitRate: Int
  channels: Int
  codec: String!
  createdAt: ISO8601DateTime!
  duration: Int!
  format: String!
  id: ID!
  length: Int!
  metadata: JSON!
  sampleRate: Int
  updatedAt: ISO8601DateTime!
  url: String!
}

type AudioTransfer {
  albumId: ID
  createdAt: ISO8601Date
  externalId: String
  id: ID
  position: Int
  recordingId: ID
  transferAgentId: ID
  updatedAt: ISO8601Date
}

type Composer {
  birthDate: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  rank: Int
  slug: String
  sortName: String
}

type Composition {
  composer: Composer
  id: ID
  lyricist: Lyricist
  lyrics: [Lyric!]
  recordings: [Recording!]
  tangotubeSlug: String
  title: String
}

type ElRecodoSong {
  album: String
  artist: String
  author: String
  composer: String
  date: ISO8601Date
  ertNumber: Int
  id: ID
  label: String
  lyrics: String
  musicId: Int
  orchestra: String
  singer: String
  style: String
  title: String
}

type Genre {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

type Lyric {
  composition: Composition
  content: String
  createdAt: ISO8601Date
  id: ID
  locale: String
  updatedAt: ISO8601Date
}

type Lyricist {
  bio: String
  birthDate: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  rank: Int
  slug: String
  sortName: String
}

type Mutation {
  signIn(
    """
    Parameters for signIn
    """
    input: signInInput!
  ): signInPayload
  signUp(
    """
    Parameters for signUp
    """
    input: signUpInput!
  ): signUpPayload
}

type Orchestra {
  birthDate: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  rank: Int
  slug: String
  sortName: String
}

type Period {
  description: String
  endYear: Int
  id: ID
  name: String
  recordingsCount: Int
  slug: String
  startYear: Int
}

type Query {
  """
  Get audio by ID.
  """
  getAudio(
    """
    ID of the audio.
    """
    id: ID!
  ): Audio!
  searchElRecodoSongs(
    """
    Page number.
    """
    page: Int

    """
    Number of results per page.
    """
    perPage: Int

    """
    Query to search for.
    """
    query: String!
  ): [ElRecodoSong!]!

  """
  Search for recordings.
  """
  searchRecordings(
    """
    Page number.
    """
    page: Int

    """
    Number of results per page.
    """
    perPage: Int

    """
    Query to search for.
    """
    query: String!
  ): [Recording!]!

  """
  Who am I
  """
  whoAmI: String!
}

type RecordLabel {
  description: String
  foundedDate: ISO8601Date
  id: ID
  name: String
}

type Recording {
  albumArtUrl: String
  audioTransfer: AudioTransfer!
  audios: [Audio!]
  bpm: Int
  composer: Composer
  composition: Composition
  elRecodoSong: ElRecodoSong
  genre: Genre
  id: ID!
  lyricist: Lyricist
  orchestra: Orchestra
  period: Period
  recordLabel: RecordLabel
  recordedDate: ISO8601Date
  recordingType: String!
  releaseDate: ISO8601Date
  singers: [Singer!]
  slug: String!
  title: String!
}

type Singer {
  bio: String
  birthDate: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  rank: Int
  slug: String
  sortName: String
}

type User {
  admin: Boolean!
  createdAt: ISO8601DateTime!
  email: String!
  firstName: String
  id: ID!
  lastName: String
  name: String!
  passwordDigest: String!
  provider: String
  uid: String
  updatedAt: ISO8601DateTime!
  username: String!
  verified: Boolean!
}

type Uuid

type ValidationErrors {
  details: String!
  fullMessages: [String!]!
}

"""
Autogenerated input type of signIn
"""
input signInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  login: String!
  password: String!
}

"""
Autogenerated return type of signIn.
"""
type signInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  success: Boolean
  token: String
  user: User
}

"""
Autogenerated input type of signUp
"""
input signUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
  username: String!
}

"""
Autogenerated return type of signUp.
"""
type signUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  success: Boolean
  user: User
}

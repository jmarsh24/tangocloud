"""
Autogenerated input type of AddLikeToRecording
"""
input AddLikeToRecordingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of AddLikeToRecording.
"""
type AddLikeToRecordingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  like: Like
  success: Boolean!
}

type Album {
  albumArtUrl: String
  albumType: String
  audioTransfers: [AudioTransfer!]!
  audioTransfersCount: Int
  description: String
  externalId: String
  id: ID
  releaseDate: ISO8601Date
  slug: String
  title: String
}

type AudioTransfer {
  album: Album
  albumId: String
  audioFileUrl: String
  audioVariants: [AudioVariant!]!
  createdAt: ISO8601Date
  filename: String
  id: ID
  playlistAudioTransfers: PlaylistAudioTransfer!
  position: Int
  recording: Recording
  recordingId: String
  transferAgent: TransferAgent
  transferAgentId: String
  updatedAt: ISO8601Date
  waveform: Waveform
}

type AudioVariant {
  audioFileUrl: String
  audioTransfer: AudioTransfer!
  audioTransferId: String!
  bitRate: Int
  channels: Int
  codec: String!
  createdAt: ISO8601DateTime!
  duration: Int!
  format: String!
  id: ID!
  length: Int!
  metadata: JSON!
  sampleRate: Int
  updatedAt: ISO8601DateTime!
}

type Composer {
  birthDate: ISO8601Date
  compositions: [Composition!]!
  compositionsCount: Int
  deathDate: ISO8601Date
  id: ID
  name: String!
  rank: Int
  recordings: [Recording!]!
  slug: String
  sortName: String
}

"""
The connection type for Composer.
"""
type ComposerConnection {
  """
  A list of edges.
  """
  edges: [ComposerEdge!]!

  """
  A list of nodes.
  """
  nodes: [Composer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ComposerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Composer
}

type Composition {
  composer: Composer!
  composerId: String!
  id: ID
  lyricist: Lyricist!
  lyricistId: String!
  lyrics: [Lyric!]!
  recordings: [Recording!]!
  tangotubeSlug: String
  title: String
}

"""
Autogenerated input type of CreateListen
"""
input CreateListenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  recordingId: ID!
}

"""
Autogenerated return type of CreateListen.
"""
type CreateListenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  listen: Listen!
  success: Boolean
}

type ElRecodoSong {
  album: String
  artist: String
  author: String
  composer: String
  date: ISO8601Date
  ertNumber: Int
  id: ID
  label: String
  lyrics: String
  musicId: Int
  orchestra: String
  recording: Recording!
  recordingId: String!
  singer: String
  style: String
  title: String
}

"""
The connection type for ElRecodoSong.
"""
type ElRecodoSongConnection {
  """
  A list of edges.
  """
  edges: [ElRecodoSongEdge!]!

  """
  A list of nodes.
  """
  nodes: [ElRecodoSong!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ElRecodoSongEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ElRecodoSong
}

type Event {
  action: String!
  createdAt: ISO8601DateTime!
  id: ID!
  ipAddress: String
  updatedAt: ISO8601DateTime!
  user: User!
  userAgent: String
  userId: String!
}

type Genre {
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  recordings: [Recording!]!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Genre.
"""
type GenreConnection {
  """
  A list of edges.
  """
  edges: [GenreEdge!]!

  """
  A list of nodes.
  """
  nodes: [Genre!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GenreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Genre
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

type Like {
  createdAt: ISO8601DateTime!
  errors: ValidationErrors
  id: ID!
  likeableId: ID!
  likeableType: String!
  user: User!
}

type Listen {
  createdAt: ISO8601DateTime!
  id: ID!
  listenHistory: ListenHistory!
  recording: Recording!
  user: User!
}

"""
The connection type for Listen.
"""
type ListenConnection {
  """
  A list of edges.
  """
  edges: [ListenEdge!]!

  """
  A list of nodes.
  """
  nodes: [Listen!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ListenEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Listen
}

type ListenHistory {
  createdAt: ISO8601DateTime!
  id: ID!
  listen(id: ID!): Listen!
  listens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ListenConnection!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: String!
}

"""
Autogenerated input type of LoginUser
"""
input LoginUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  login: String!
  password: String!
}

"""
Autogenerated return type of LoginUser.
"""
type LoginUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  success: Boolean
  token: String
  user: User
}

type Lyric {
  composition: Composition!
  compositionId: String!
  content: String
  createdAt: ISO8601Date
  id: ID
  locale: String
  updatedAt: ISO8601Date
}

type Lyricist {
  bio: String
  birthDate: ISO8601Date
  compositions: [Composition!]!
  deathDate: ISO8601Date
  id: ID
  lyrics: [Lyric!]!
  name: String
  rank: Int
  slug: String
  sortName: String
}

"""
The connection type for Lyricist.
"""
type LyricistConnection {
  """
  A list of edges.
  """
  edges: [LyricistEdge!]!

  """
  A list of nodes.
  """
  nodes: [Lyricist!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type LyricistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Lyricist
}

type Mutation {
  addLikeToRecording(
    """
    Parameters for AddLikeToRecording
    """
    input: AddLikeToRecordingInput!
  ): AddLikeToRecordingPayload
  createListen(
    """
    Parameters for CreateListen
    """
    input: CreateListenInput!
  ): CreateListenPayload
  login(
    """
    Parameters for LoginUser
    """
    input: LoginUserInput!
  ): LoginUserPayload
  register(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  removeLikeFromRecording(
    """
    Parameters for RemoveLikeFromRecording
    """
    input: RemoveLikeFromRecordingInput!
  ): RemoveLikeFromRecordingPayload
  removeListen(
    """
    Parameters for RemoveListen
    """
    input: RemoveListenInput!
  ): RemoveListenPayload
}

type Orchestra {
  birthDate: ISO8601Date
  compositions: [Composition!]!
  deathDate: ISO8601Date
  id: ID
  lyricists: [Lyricist!]!
  name: String
  rank: Int
  recordings: [Recording!]!
  recordingsCount: Int
  singers: [Singer!]!
  slug: String
  sortName: String
}

"""
The connection type for Orchestra.
"""
type OrchestraConnection {
  """
  A list of edges.
  """
  edges: [OrchestraEdge!]!

  """
  A list of nodes.
  """
  nodes: [Orchestra!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrchestraEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Orchestra
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Period {
  description: String
  endYear: Int
  id: ID
  name: String
  recordings: [Recording!]!
  recordingsCount: Int
  slug: String
  startYear: Int
}

"""
The connection type for Period.
"""
type PeriodConnection {
  """
  A list of edges.
  """
  edges: [PeriodEdge!]!

  """
  A list of nodes.
  """
  nodes: [Period!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PeriodEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Period
}

type Playlist {
  audioTransfers: [AudioTransfer!]!
  audioVariants: [AudioVariant!]!
  createdAt: ISO8601DateTime!
  description: String
  followersCount: Int!
  id: ID!
  imageUrl: String
  likesCount: Int!
  listensCount: Int!
  playlistAudioTransfers: [PlaylistAudioTransfer!]
  public: Boolean!
  recordings: [Recording!]!
  sharesCount: Int!
  songsCount: Int!
  system: Boolean!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: String!
}

type PlaylistAudioTransfer {
  audioTransfer: AudioTransfer!
  audioTransferId: String!
  createdAt: ISO8601DateTime!
  id: ID!
  playlist: Playlist!
  playlistId: String!
  position: Int!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Playlist.
"""
type PlaylistConnection {
  """
  A list of edges.
  """
  edges: [PlaylistEdge!]!

  """
  A list of nodes.
  """
  nodes: [Playlist!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PlaylistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Playlist
}

type Query {
  fetchAudioTransfer(
    """
    ID of the audio transfer.
    """
    id: ID!
  ): AudioTransfer!
  fetchAudioVariant(
    """
    ID of the audio variant.
    """
    id: ID!
  ): AudioVariant!
  fetchComposer(
    """
    ID of the composer.
    """
    id: ID!
  ): Composer!
  fetchGenre(
    """
    ID of the genre.
    """
    id: ID!
  ): Genre!
  fetchListenHistory: ListenHistory!
  fetchLyricist(
    """
    ID of the lyricist.
    """
    id: ID!
  ): Lyricist!
  fetchOrchestra(
    """
    ID of the orchestra.
    """
    id: ID!
  ): Orchestra!
  fetchPeriod(
    """
    ID of the period.
    """
    id: ID!
  ): Period!
  fetchPlaylist(
    """
    ID of the playlist.
    """
    id: ID!
  ): Playlist!
  fetchRecording(
    """
    ID of the recording.
    """
    id: ID!
  ): Recording!
  fetchSinger(
    """
    ID of the singer.
    """
    id: ID!
  ): Singer!
  fetchUser(
    """
    ID of the user.
    """
    id: ID!
  ): User!
  searchComposers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): ComposerConnection!
  searchElRecodoSongs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): ElRecodoSongConnection!
  searchGenres(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): GenreConnection!
  searchLyricists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): LyricistConnection!
  searchOrchestras(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): OrchestraConnection!
  searchPeriods(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String
  ): PeriodConnection!
  searchPlaylists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String!
  ): PlaylistConnection!
  searchRecordings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Query to search for.
    """
    query: String
  ): RecordingConnection!
  searchSingers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Name of the singer.
    """
    query: String!
  ): SingerConnection!
  searchUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Search query.
    """
    query: String!
  ): UserConnection!
  userProfile: User!
}

type RecordLabel {
  description: String
  foundedDate: ISO8601Date
  id: ID
  name: String
}

type Recording {
  audioTransfers: [AudioTransfer!]!
  audioVariants: [AudioVariant!]!
  bpm: Int
  composer: Composer!
  composerId: String!
  composition: Composition!
  compositionId: String!
  elRecodoSong: ElRecodoSong!
  elRecodoSongId: String!
  genre: Genre!
  genreId: String!
  id: ID!
  lyricist: Lyricist!
  lyricistId: String!
  orchestra: Orchestra!
  orchestraId: String!
  period: Period!
  periodId: String!
  recordLabel: RecordLabel!
  recordLabelId: String!
  recordedDate: ISO8601Date
  recordingType: String!
  releaseDate: ISO8601Date
  singers: [Singer!]!
  slug: String!
  title: String!
}

"""
The connection type for Recording.
"""
type RecordingConnection {
  """
  A list of edges.
  """
  edges: [RecordingEdge!]!

  """
  A list of nodes.
  """
  nodes: [Recording!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type RecordingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Recording
}

type RecordingSinger {
  createdAt: ISO8601DateTime!
  id: ID!
  recording: Recording!
  recordingId: String!
  singer: Singer!
  singerId: String!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
  username: String!
}

"""
Autogenerated return type of RegisterUser.
"""
type RegisterUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  success: Boolean
  user: User
}

"""
Autogenerated input type of RemoveLikeFromRecording
"""
input RemoveLikeFromRecordingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of RemoveLikeFromRecording.
"""
type RemoveLikeFromRecordingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  success: Boolean!
}

"""
Autogenerated input type of RemoveListen
"""
input RemoveListenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of RemoveListen.
"""
type RemoveListenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  message: String!
  success: Boolean!
}

type Session {
  createdAt: ISO8601DateTime!
  id: ID!
  ipAddress: String
  updatedAt: ISO8601DateTime!
  user: User!
  userAgent: String
  userId: String!
}

type Singer {
  bio: String
  birthDate: ISO8601Date
  deathDate: ISO8601Date
  id: ID
  name: String
  rank: Int
  recordingSingers: [RecordingSinger!]!
  recordings: [Recording!]!
  slug: String
  sortName: String
}

"""
The connection type for Singer.
"""
type SingerConnection {
  """
  A list of edges.
  """
  edges: [SingerEdge!]!

  """
  A list of nodes.
  """
  nodes: [Singer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SingerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Singer
}

type TransferAgent {
  audioTransfers: [AudioTransfer!]!
  audioVariants: [AudioVariant!]!
  createdAt: ISO8601DateTime!
  description: String
  id: ID!
  name: String!
  recordings: [Recording!]!
  updatedAt: ISO8601DateTime!
  url: String
}

type User {
  admin: Boolean!
  avatarUrl: String
  createdAt: ISO8601DateTime!
  email: String!
  events: [Event!]!
  firstName: String
  id: ID!
  lastName: String
  name: String!
  passwordDigest: String!
  provider: String
  sessions: [Session!]!
  uid: String
  updatedAt: ISO8601DateTime!
  username: String!
  verified: Boolean!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

type ValidationErrors {
  details: String!
  fullMessages: [String!]!
}

type Waveform {
  audioTransfer: AudioTransfer!
  audioTransferId: String!
  bits: Int!
  channels: Int!
  createdAt: ISO8601DateTime!
  data: [Float!]!
  id: ID!
  imageUrl: String
  length: Int!
  sampleRate: Int!
  samplesPerPixel: Int!
  updatedAt: ISO8601DateTime!
  version: Int!
}
